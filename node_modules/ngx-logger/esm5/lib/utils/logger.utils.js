/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DEFAULT_COLOR_SCHEME } from '../resources/color-schemes';
import { NgxLoggerLevel } from '../types/logger-level.enum';
var NGXLoggerUtils = /** @class */ (function () {
    function NGXLoggerUtils() {
    }
    /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    NGXLoggerUtils.prepareMetaString = /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    function (timestamp, logLevel, fileName, lineNumber) {
        /** @type {?} */
        var fileDetails = fileName ? " [" + fileName + ":" + lineNumber + "]" : '';
        return timestamp + " " + logLevel + fileDetails;
    };
    /**
     * @param {?} level
     * @param {?=} configColorScheme
     * @return {?}
     */
    NGXLoggerUtils.getColor = /**
     * @param {?} level
     * @param {?=} configColorScheme
     * @return {?}
     */
    function (level, configColorScheme) {
        switch (level) {
            case NgxLoggerLevel.TRACE:
                return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);
            case NgxLoggerLevel.DEBUG:
                return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);
            case NgxLoggerLevel.INFO:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.LOG:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.WARN:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.ERROR:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.FATAL:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.OFF:
            default:
                return;
        }
    };
    /**
     * @private
     * @param {?} level
     * @param {?} configColorScheme
     * @return {?}
     */
    NGXLoggerUtils.getColorFromConfig = /**
     * @private
     * @param {?} level
     * @param {?} configColorScheme
     * @return {?}
     */
    function (level, configColorScheme) {
        if (!configColorScheme) {
            return DEFAULT_COLOR_SCHEME[level];
        }
        return configColorScheme[level];
    };
    /**
     * @param {?} message
     * @return {?}
     */
    NGXLoggerUtils.prepareMessage = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        try {
            if (typeof message !== 'string' && !(message instanceof Error)) {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            // additional = [message, ...additional];
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    };
    /**
     * @param {?} additional
     * @return {?}
     */
    NGXLoggerUtils.prepareAdditionalParameters = /**
     * @param {?} additional
     * @return {?}
     */
    function (additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((/**
         * @param {?} next
         * @param {?} idx
         * @return {?}
         */
        function (next, idx) {
            try {
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return "The additional[" + idx + "] value could not be parsed using JSON.stringify().";
            }
        }));
    };
    return NGXLoggerUtils;
}());
export { NGXLoggerUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9sb2dnZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBc0VBLENBQUM7Ozs7Ozs7O0lBcEVRLGdDQUFpQjs7Ozs7OztJQUF4QixVQUF5QixTQUFpQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQjs7WUFDMUYsV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBSyxRQUFRLFNBQUksVUFBVSxNQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFFbEUsT0FBVSxTQUFTLFNBQUksUUFBUSxHQUFHLFdBQWEsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFTSx1QkFBUTs7Ozs7SUFBZixVQUFnQixLQUFxQixFQUFFLGlCQUFpQztRQUN0RSxRQUFRLEtBQUssRUFBRTtZQUNiLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDdEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pFLEtBQUssY0FBYyxDQUFDLEdBQUc7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUN6RSxLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUN0QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDdkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQzFFLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDeEI7Z0JBQ0UsT0FBTztTQUNWO0lBQ0gsQ0FBQzs7Ozs7OztJQUVjLGlDQUFrQjs7Ozs7O0lBQWpDLFVBQWtDLEtBQWEsRUFBRSxpQkFBZ0M7UUFDL0UsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLE9BQU8sb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFFRCxPQUFPLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRU0sNkJBQWM7Ozs7SUFBckIsVUFBc0IsT0FBTztRQUMzQixJQUFJO1lBQ0YsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFBWSxLQUFLLENBQUMsRUFBRTtnQkFDOUQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVix5Q0FBeUM7WUFDekMsT0FBTyxHQUFHLHlFQUF5RSxDQUFDO1NBQ3JGO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Ozs7SUFFTSwwQ0FBMkI7Ozs7SUFBbEMsVUFBbUMsVUFBaUI7UUFDbEQsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7WUFDbkQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sVUFBVSxDQUFDLEdBQUc7Ozs7O1FBQUMsVUFBQyxJQUFJLEVBQUUsR0FBRztZQUM5QixJQUFJO2dCQUNGLCtGQUErRjtnQkFDL0YsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO2dCQUVELE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLG9CQUFrQixHQUFHLHdEQUFxRCxDQUFDO2FBQ25GO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDO0lBRUgscUJBQUM7QUFBRCxDQUFDLEFBdEVELElBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtERUZBVUxUX0NPTE9SX1NDSEVNRX0gZnJvbSAnLi4vcmVzb3VyY2VzL2NvbG9yLXNjaGVtZXMnO1xyXG5pbXBvcnQge05neExvZ2dlckxldmVsfSBmcm9tICcuLi90eXBlcy9sb2dnZXItbGV2ZWwuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyVXRpbHMge1xyXG5cclxuICBzdGF0aWMgcHJlcGFyZU1ldGFTdHJpbmcodGltZXN0YW1wOiBzdHJpbmcsIGxvZ0xldmVsOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGxpbmVOdW1iZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZmlsZURldGFpbHMgPSBmaWxlTmFtZSA/IGAgWyR7ZmlsZU5hbWV9OiR7bGluZU51bWJlcn1dYCA6ICcnO1xyXG5cclxuICAgIHJldHVybiBgJHt0aW1lc3RhbXB9ICR7bG9nTGV2ZWx9JHtmaWxlRGV0YWlsc31gO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldENvbG9yKGxldmVsOiBOZ3hMb2dnZXJMZXZlbCwgY29uZmlnQ29sb3JTY2hlbWU/OiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5UUkFDRTpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuVFJBQ0UsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5ERUJVRzpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuREVCVUcsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5JTkZPOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5JTkZPLCBjb25maWdDb2xvclNjaGVtZSk7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuTE9HOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5JTkZPLCBjb25maWdDb2xvclNjaGVtZSk7XHJcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuV0FSTjpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuRkFUQUwsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5FUlJPUjpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuRkFUQUwsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5GQVRBTDpcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuRkFUQUwsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5PRkY6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0Q29sb3JGcm9tQ29uZmlnKGxldmVsOiBudW1iZXIsIGNvbmZpZ0NvbG9yU2NoZW1lOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGlmICghY29uZmlnQ29sb3JTY2hlbWUpIHtcclxuICAgICAgcmV0dXJuIERFRkFVTFRfQ09MT1JfU0NIRU1FW2xldmVsXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29uZmlnQ29sb3JTY2hlbWVbbGV2ZWxdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZXBhcmVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgJiYgIShtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpKSB7XHJcbiAgICAgICAgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDIpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8vIGFkZGl0aW9uYWwgPSBbbWVzc2FnZSwgLi4uYWRkaXRpb25hbF07XHJcbiAgICAgIG1lc3NhZ2UgPSAnVGhlIHByb3ZpZGVkIFwibWVzc2FnZVwiIHZhbHVlIGNvdWxkIG5vdCBiZSBwYXJzZWQgd2l0aCBKU09OLnN0cmluZ2lmeSgpLic7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGFyZUFkZGl0aW9uYWxQYXJhbWV0ZXJzKGFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgICBpZiAoYWRkaXRpb25hbCA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFkZGl0aW9uYWwubWFwKChuZXh0LCBpZHgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBXZSBqdXN0IHdhbnQgdG8gbWFrZSBzdXJlIHRoZSBKU09OIGNhbiBiZSBwYXJzZWQsIHdlIGRvIG5vdCB3YW50IHRvIGFjdHVhbGx5IGNoYW5nZSB0aGUgdHlwZVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5leHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gYFRoZSBhZGRpdGlvbmFsWyR7aWR4fV0gdmFsdWUgY291bGQgbm90IGJlIHBhcnNlZCB1c2luZyBKU09OLnN0cmluZ2lmeSgpLmA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19