/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';
import * as vlq from 'vlq';
import { of } from 'rxjs';
import { catchError, filter, map, retry, shareReplay, switchMap } from 'rxjs/operators';
import { LogPosition } from './types/log-position';
var NGXMapperService = /** @class */ (function () {
    function NGXMapperService(httpBackend) {
        this.httpBackend = httpBackend;
        // cache for source maps, key is source map location, ie. 'http://localhost:4200/main.js.map'
        this.sourceMapCache = new Map();
        // cache for specific log position, key is the dist position, ie 'main.js:339:21'
        this.logPositionCache = new Map();
    }
    /*
    Static Functions
   */
    /*
      Static Functions
     */
    /**
     * @private
     * @param {?} proxiedSteps
     * @return {?}
     */
    NGXMapperService.getStackLine = /*
      Static Functions
     */
    /**
     * @private
     * @param {?} proxiedSteps
     * @return {?}
     */
    function (proxiedSteps) {
        /** @type {?} */
        var error = new Error();
        try {
            // noinspection ExceptionCaughtLocallyJS
            throw error;
        }
        catch (e) {
            try {
                // Here are different examples of stacktrace 
                // Firefox (last line is the user code, the 4 first are ours):
                // getStackLine@http://localhost:4200/main.js:358:23
                // getCallerDetails@http://localhost:4200/main.js:557:44
                // _log@http://localhost:4200/main.js:830:28
                // debug@http://localhost:4200/main.js:652:14
                // handleLog@http://localhost:4200/main.js:1158:29
                // Chrome and Edge (last line is the user code):
                // Error
                // at Function.getStackLine (ngx-logger.js:329)
                // at NGXMapperService.getCallerDetails (ngx-logger.js:528)
                // at NGXLogger._log (ngx-logger.js:801)
                // at NGXLogger.info (ngx-logger.js:631)
                // at AppComponent.handleLog (app.component.ts:38)
                /** @type {?} */
                var defaultProxy = 4;
                // We make 4 functions call before getting here
                /** @type {?} */
                var firstStackLine = error.stack.split('\n')[0];
                if (!firstStackLine.includes('.js:')) {
                    // The stacktrace starts with no function call (example in Chrome or Edge)
                    defaultProxy = defaultProxy + 1;
                }
                return error.stack.split('\n')[(defaultProxy + (proxiedSteps || 0))];
            }
            catch (e) {
                return null;
            }
        }
    };
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    NGXMapperService.getPosition = /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    function (stackLine) {
        // strip base path, then parse filename, line, and column
        /** @type {?} */
        var positionStartIndex = stackLine.lastIndexOf('\/');
        /** @type {?} */
        var positionEndIndex = stackLine.indexOf(')');
        if (positionEndIndex < 0) {
            positionEndIndex = undefined;
        }
        /** @type {?} */
        var position = stackLine.substring(positionStartIndex + 1, positionEndIndex);
        /** @type {?} */
        var dataArray = position.split(':');
        if (dataArray.length === 3) {
            return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);
        }
        return new LogPosition('unknown', 0, 0);
    };
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    NGXMapperService.getTranspileLocation = /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    function (stackLine) {
        // Example stackLine:
        // Firefox : getStackLine@http://localhost:4200/main.js:358:23
        // Chrome and Edge : at Function.getStackLine (ngx-logger.js:329)
        /** @type {?} */
        var locationStartIndex = stackLine.indexOf('(');
        if (locationStartIndex < 0) {
            locationStartIndex = stackLine.lastIndexOf('@');
            if (locationStartIndex < 0) {
                locationStartIndex = stackLine.lastIndexOf(' ');
            }
        }
        /** @type {?} */
        var locationEndIndex = stackLine.indexOf(')');
        if (locationEndIndex < 0) {
            locationEndIndex = undefined;
        }
        return stackLine.substring(locationStartIndex + 1, locationEndIndex);
    };
    /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    NGXMapperService.getMapFilePath = /**
     * @private
     * @param {?} stackLine
     * @return {?}
     */
    function (stackLine) {
        /** @type {?} */
        var file = NGXMapperService.getTranspileLocation(stackLine);
        /** @type {?} */
        var mapFullPath = file.substring(0, file.lastIndexOf(':'));
        return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';
    };
    /**
     * @private
     * @param {?} sourceMap
     * @param {?} position
     * @return {?}
     */
    NGXMapperService.getMapping = /**
     * @private
     * @param {?} sourceMap
     * @param {?} position
     * @return {?}
     */
    function (sourceMap, position) {
        // => ';' indicates end of a line
        // => ',' separates mappings in a line
        // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]
        /** @type {?} */
        var sourceFileIndex = 0;
        /** @type {?} */
        var // second field
        sourceCodeLine = 0;
        /** @type {?} */
        var // third field
        sourceCodeColumn = 0;
        // fourth field
        /** @type {?} */
        var lines = sourceMap.mappings.split(';');
        for (var lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            // reset column position to 0 after each line
            /** @type {?} */
            var generatedCodeColumn = 0;
            // decode sections in line
            /** @type {?} */
            var columns = lines[lineIndex].split(',');
            for (var columnIndex = 0; columnIndex < columns.length; columnIndex++) {
                /** @type {?} */
                var decodedSection = vlq.decode(columns[columnIndex]);
                if (decodedSection.length >= 4) {
                    // update relative positions
                    generatedCodeColumn += decodedSection[0];
                    sourceFileIndex += decodedSection[1];
                    sourceCodeLine += decodedSection[2];
                    sourceCodeColumn += decodedSection[3];
                }
                // check if matching map
                if (lineIndex === position.lineNumber) {
                    if (generatedCodeColumn === position.columnNumber) {
                        // matching column and line found
                        return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);
                    }
                    else if (columnIndex + 1 === columns.length) {
                        // matching column not found, but line is correct
                        return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);
                    }
                }
            }
        }
        // failed if reached
        return new LogPosition('unknown', 0, 0);
    };
    /**
     * does the http get request to get the source map
     * @param sourceMapLocation
     * @param distPosition
     */
    /**
     * does the http get request to get the source map
     * @private
     * @param {?} sourceMapLocation
     * @param {?} distPosition
     * @return {?}
     */
    NGXMapperService.prototype._getSourceMap = /**
     * does the http get request to get the source map
     * @private
     * @param {?} sourceMapLocation
     * @param {?} distPosition
     * @return {?}
     */
    function (sourceMapLocation, distPosition) {
        /** @type {?} */
        var req = new HttpRequest('GET', sourceMapLocation);
        /** @type {?} */
        var distPositionKey = distPosition.toString();
        // if the specific log position is already in cache return it
        if (this.logPositionCache.has(distPositionKey)) {
            return this.logPositionCache.get(distPositionKey);
        }
        // otherwise check if the source map is already cached for given source map location
        if (!this.sourceMapCache.has(sourceMapLocation)) {
            // obtain the source map if not cached
            this.sourceMapCache.set(sourceMapLocation, this.httpBackend.handle(req).pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e instanceof HttpResponse; })), map((/**
             * @param {?} httpResponse
             * @return {?}
             */
            function (httpResponse) { return httpResponse.body; })), retry(3), shareReplay(1)));
        }
        // at this point the source map is cached, use it to get specific log position mapping
        /** @type {?} */
        var logPosition$ = this.sourceMapCache.get(sourceMapLocation).pipe(map((/**
         * @param {?} sourceMap
         * @return {?}
         */
        function (sourceMap) {
            // map generated position to source position
            return NGXMapperService.getMapping(sourceMap, distPosition);
        })), catchError((/**
         * @return {?}
         */
        function () { return of(distPosition); })), shareReplay(1));
        // store specific log position in cache for given dest position and return it
        this.logPositionCache.set(distPositionKey, logPosition$);
        return logPosition$;
    };
    /**
     * Returns the LogPosition for the current log
     * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name
     * and number of the call
     * @param sourceMapsEnabled
     * @param proxiedSteps
     */
    /**
     * Returns the LogPosition for the current log
     * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name
     * and number of the call
     * @param {?} sourceMapsEnabled
     * @param {?} proxiedSteps
     * @return {?}
     */
    NGXMapperService.prototype.getCallerDetails = /**
     * Returns the LogPosition for the current log
     * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name
     * and number of the call
     * @param {?} sourceMapsEnabled
     * @param {?} proxiedSteps
     * @return {?}
     */
    function (sourceMapsEnabled, proxiedSteps) {
        // parse generated file mapping from stack trace
        var _this = this;
        // parse generated file mapping from stack trace
        /** @type {?} */
        var stackLine = NGXMapperService.getStackLine(proxiedSteps);
        // if we were not able to parse the stackLine, just return an empty Log Position
        if (!stackLine) {
            return of(new LogPosition('', 0, 0));
        }
        return of([
            NGXMapperService.getPosition(stackLine),
            NGXMapperService.getMapFilePath(stackLine)
        ]).pipe(switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), distPosition = _b[0], sourceMapLocation = _b[1];
            // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,
            // then just use the position of the JS instead of the source
            if (!sourceMapsEnabled) {
                return of(distPosition);
            }
            // finally try to get the source map and return the position
            return _this._getSourceMap(sourceMapLocation, distPosition);
        })));
    };
    NGXMapperService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NGXMapperService.ctorParameters = function () { return [
        { type: HttpBackend }
    ]; };
    return NGXMapperService;
}());
export { NGXMapperService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXMapperService.prototype.sourceMapCache;
    /**
     * @type {?}
     * @private
     */
    NGXMapperService.prototype.logPositionCache;
    /**
     * @type {?}
     * @private
     */
    NGXMapperService.prototype.httpBackend;
}
//# sourceMappingURL=data:application/json;base64,