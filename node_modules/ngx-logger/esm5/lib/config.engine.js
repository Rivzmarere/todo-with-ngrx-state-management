/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoggerConfig } from './logger.config';
var NGXLoggerConfigEngine = /** @class */ (function () {
    function NGXLoggerConfigEngine(config) {
        this.config = config;
        this._config = config;
    }
    Object.defineProperty(NGXLoggerConfigEngine.prototype, "level", {
        /** Get a readonly access to the level configured for the NGXLogger */
        get: /**
         * Get a readonly access to the level configured for the NGXLogger
         * @return {?}
         */
        function () {
            return this._config.level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NGXLoggerConfigEngine.prototype, "serverLogLevel", {
        /** Get a readonly access to the serverLogLevel configured for the NGXLogger */
        get: /**
         * Get a readonly access to the serverLogLevel configured for the NGXLogger
         * @return {?}
         */
        function () {
            return this._config.serverLogLevel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} config
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype.updateConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this._config = this._clone(config);
    };
    /**
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this._clone(this._config);
    };
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype._clone = 
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        /** @type {?} */
        var cloneConfig = new LoggerConfig();
        Object.keys(object).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            cloneConfig[key] = object[key];
        }));
        return cloneConfig;
    };
    return NGXLoggerConfigEngine;
}());
export { NGXLoggerConfigEngine };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerConfigEngine.prototype._config;
    /** @type {?} */
    NGXLoggerConfigEngine.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmVuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvY29uZmlnLmVuZ2luZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRzdDO0lBR0UsK0JBQXFCLE1BQW9CO1FBQXBCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUdELHNCQUFJLHdDQUFLO1FBRFQsc0VBQXNFOzs7OztRQUN0RTtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDNUIsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxpREFBYztRQURsQiwrRUFBK0U7Ozs7O1FBQy9FO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTs7Ozs7SUFFRCw0Q0FBWTs7OztJQUFaLFVBQWEsTUFBb0I7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCx5Q0FBUzs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCx1SEFBdUg7SUFDdkgscUhBQXFIO0lBQ3JILG9CQUFvQjs7Ozs7Ozs7O0lBQ1osc0NBQU07Ozs7Ozs7OztJQUFkLFVBQWUsTUFBVzs7WUFDbEIsV0FBVyxHQUFpQixJQUFJLFlBQVksRUFBRTtRQUVwRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLEdBQUc7WUFDOUIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUFyQ0QsSUFxQ0M7Ozs7Ozs7SUFuQ0Msd0NBQThCOztJQUNsQix1Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvZ2dlckNvbmZpZ30gZnJvbSAnLi9sb2dnZXIuY29uZmlnJztcclxuaW1wb3J0IHsgTmd4TG9nZ2VyTGV2ZWwgfSBmcm9tICcuL3R5cGVzL2xvZ2dlci1sZXZlbC5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBOR1hMb2dnZXJDb25maWdFbmdpbmUge1xyXG5cclxuICBwcml2YXRlIF9jb25maWc6IExvZ2dlckNvbmZpZztcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBjb25maWc6IExvZ2dlckNvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCBhIHJlYWRvbmx5IGFjY2VzcyB0byB0aGUgbGV2ZWwgY29uZmlndXJlZCBmb3IgdGhlIE5HWExvZ2dlciAqL1xyXG4gIGdldCBsZXZlbCgpOiBOZ3hMb2dnZXJMZXZlbCB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmxldmVsO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldCBhIHJlYWRvbmx5IGFjY2VzcyB0byB0aGUgc2VydmVyTG9nTGV2ZWwgY29uZmlndXJlZCBmb3IgdGhlIE5HWExvZ2dlciAqL1xyXG4gIGdldCBzZXJ2ZXJMb2dMZXZlbCgpOiBOZ3hMb2dnZXJMZXZlbCB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnNlcnZlckxvZ0xldmVsO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQ29uZmlnKGNvbmZpZzogTG9nZ2VyQ29uZmlnKSB7XHJcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9jbG9uZShjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29uZmlnKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Nsb25lKHRoaXMuX2NvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBhZGQgdGVzdHMgYXJvdW5kIGNsb25pbmcgdGhlIGNvbmZpZy4gdXBkYXRpbmcgYW4gb2JqZWN0IHBhc3NlZCBpbnRvIHRoZSBjb25maWcgKG9yIHJldHJpZXZpbmcgZnJvbSB0aGUgY29uZmlnKVxyXG4gIC8vIHNob3VsZCBub3QgdXBkYXRlIHRoZSBhY3RpdmUgY29uZmlnLCB0aGlzIGlzIGEgc2hhbGxvdyBjbG9uZS4gSWYgb3VyIGNvbmZpZyBldmVyIGJlY29tZXMgaGllcmFyY2hpY2FsIHdlIG11c3QgbWFrZVxyXG4gIC8vIHRoaXMgYSBkZWVwIGNsb25lXHJcbiAgcHJpdmF0ZSBfY2xvbmUob2JqZWN0OiBhbnkpIHtcclxuICAgIGNvbnN0IGNsb25lQ29uZmlnOiBMb2dnZXJDb25maWcgPSBuZXcgTG9nZ2VyQ29uZmlnKCk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgY2xvbmVDb25maWdba2V5XSA9IG9iamVjdFtrZXldO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGNsb25lQ29uZmlnO1xyXG4gIH1cclxufVxyXG4iXX0=