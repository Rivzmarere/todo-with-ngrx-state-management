import { HttpHeaders, HttpParams } from '@angular/common/http';
import { DatePipe } from '@angular/common';
import { NGXLoggerHttpService } from './http.service';
import { NgxLoggerLevel } from './types/logger-level.enum';
import { LoggerConfig } from './logger.config';
import { NGXLoggerMonitor } from './logger-monitor';
import { NGXMapperService } from './mapper.service';
export declare const Levels: string[];
export declare class NGXLogger {
    private readonly mapperService;
    private readonly httpService;
    private platformId;
    private readonly datePipe;
    private readonly _isIE;
    private readonly _logFunc;
    private config;
    private _customHttpHeaders;
    private _customParams;
    private _withCredentials;
    private _loggerMonitor;
    constructor(mapperService: NGXMapperService, httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig, platformId: any, datePipe: DatePipe);
    /** Get a readonly access to the level configured for the NGXLogger */
    readonly level: NgxLoggerLevel;
    /** Get a readonly access to the serverLogLevel configured for the NGXLogger */
    readonly serverLogLevel: NgxLoggerLevel;
    trace(message: any, ...additional: any[]): void;
    debug(message: any, ...additional: any[]): void;
    info(message: any, ...additional: any[]): void;
    log(message: any, ...additional: any[]): void;
    warn(message: any, ...additional: any[]): void;
    error(message: any, ...additional: any[]): void;
    fatal(message: any, ...additional: any[]): void;
    setCustomHttpHeaders(headers: HttpHeaders): void;
    setCustomParams(params: HttpParams): void;
    setWithCredentialsOptionValue(withCredentials: boolean): void;
    registerMonitor(monitor: NGXLoggerMonitor): void;
    updateConfig(config: LoggerConfig): void;
    getConfigSnapshot(): LoggerConfig;
    private _logIE;
    private _logModern;
    private _log;
}
