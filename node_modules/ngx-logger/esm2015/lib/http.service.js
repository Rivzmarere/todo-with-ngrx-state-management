/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
export class NGXLoggerHttpService {
    /**
     * @param {?} httpBackend
     */
    constructor(httpBackend) {
        this.httpBackend = httpBackend;
    }
    /**
     * @param {?} url
     * @param {?} log
     * @param {?} options
     * @return {?}
     */
    logOnServer(url, log, options) {
        // HttpBackend skips all HttpInterceptors
        // They may log errors using this service causing circular calls
        /** @type {?} */
        const req = new HttpRequest('POST', url, log, options || {});
        return this.httpBackend.handle(req).pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        e => e instanceof HttpResponse)), map((/**
         * @param {?} httpResponse
         * @return {?}
         */
        (httpResponse) => httpResponse.body)));
    }
}
NGXLoggerHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NGXLoggerHttpService.ctorParameters = () => [
    { type: HttpBackend }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerHttpService.prototype.httpBackend;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi9odHRwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFNUUsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQU0zQyxNQUFNLE9BQU8sb0JBQW9COzs7O0lBQy9CLFlBQTZCLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUksQ0FBQzs7Ozs7OztJQUUxRCxXQUFXLENBQUMsR0FBVyxFQUFFLEdBQW9CLEVBQUUsT0FBZTs7OztjQUd0RCxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQU0sTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDdEMsTUFBTTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLFlBQVksRUFBQyxFQUN0QyxHQUFHOzs7O1FBQXlCLENBQUMsWUFBK0IsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBQyxDQUNwRixDQUFDO0lBQ0osQ0FBQzs7O1lBWkYsVUFBVTs7OztZQVBILFdBQVc7Ozs7Ozs7SUFTTCwyQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7SHR0cEJhY2tlbmQsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge2ZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE5HWExvZ0ludGVyZmFjZSB9IGZyb20gJy4vdHlwZXMvbmd4LWxvZy5pbnRlcmZhY2UnO1xyXG5cclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOR1hMb2dnZXJIdHRwU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBodHRwQmFja2VuZDogSHR0cEJhY2tlbmQpIHsgfVxyXG5cclxuICBsb2dPblNlcnZlcih1cmw6IHN0cmluZywgbG9nOiBOR1hMb2dJbnRlcmZhY2UsIG9wdGlvbnM6IG9iamVjdCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAvLyBIdHRwQmFja2VuZCBza2lwcyBhbGwgSHR0cEludGVyY2VwdG9yc1xyXG4gICAgLy8gVGhleSBtYXkgbG9nIGVycm9ycyB1c2luZyB0aGlzIHNlcnZpY2UgY2F1c2luZyBjaXJjdWxhciBjYWxsc1xyXG4gICAgY29uc3QgcmVxID0gbmV3IEh0dHBSZXF1ZXN0PGFueT4oJ1BPU1QnLCB1cmwsIGxvZywgb3B0aW9ucyB8fCB7fSk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5oYW5kbGUocmVxKS5waXBlKFxyXG4gICAgICBmaWx0ZXIoZSA9PiBlIGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSxcclxuICAgICAgbWFwPEh0dHBSZXNwb25zZTxhbnk+LCBhbnk+KChodHRwUmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KSA9PiBodHRwUmVzcG9uc2UuYm9keSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=