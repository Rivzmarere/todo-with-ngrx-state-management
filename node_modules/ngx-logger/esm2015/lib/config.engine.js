/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoggerConfig } from './logger.config';
export class NGXLoggerConfigEngine {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this._config = config;
    }
    /**
     * Get a readonly access to the level configured for the NGXLogger
     * @return {?}
     */
    get level() {
        return this._config.level;
    }
    /**
     * Get a readonly access to the serverLogLevel configured for the NGXLogger
     * @return {?}
     */
    get serverLogLevel() {
        return this._config.serverLogLevel;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    updateConfig(config) {
        this._config = this._clone(config);
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this._clone(this._config);
    }
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    _clone(object) {
        /** @type {?} */
        const cloneConfig = new LoggerConfig();
        Object.keys(object).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            cloneConfig[key] = object[key];
        }));
        return cloneConfig;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerConfigEngine.prototype._config;
    /** @type {?} */
    NGXLoggerConfigEngine.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmVuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvY29uZmlnLmVuZ2luZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRzdDLE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFHaEMsWUFBcUIsTUFBb0I7UUFBcEIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDOzs7OztJQUdELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFHRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxNQUFvQjtRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7OztJQUtPLE1BQU0sQ0FBQyxNQUFXOztjQUNsQixXQUFXLEdBQWlCLElBQUksWUFBWSxFQUFFO1FBRXBELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjs7Ozs7O0lBbkNDLHdDQUE4Qjs7SUFDbEIsdUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2dnZXJDb25maWd9IGZyb20gJy4vbG9nZ2VyLmNvbmZpZyc7XHJcbmltcG9ydCB7IE5neExvZ2dlckxldmVsIH0gZnJvbSAnLi90eXBlcy9sb2dnZXItbGV2ZWwuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyQ29uZmlnRW5naW5lIHtcclxuXHJcbiAgcHJpdmF0ZSBfY29uZmlnOiBMb2dnZXJDb25maWc7XHJcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgY29uZmlnOiBMb2dnZXJDb25maWcpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgYSByZWFkb25seSBhY2Nlc3MgdG8gdGhlIGxldmVsIGNvbmZpZ3VyZWQgZm9yIHRoZSBOR1hMb2dnZXIgKi9cclxuICBnZXQgbGV2ZWwoKTogTmd4TG9nZ2VyTGV2ZWwge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5sZXZlbDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgYSByZWFkb25seSBhY2Nlc3MgdG8gdGhlIHNlcnZlckxvZ0xldmVsIGNvbmZpZ3VyZWQgZm9yIHRoZSBOR1hMb2dnZXIgKi9cclxuICBnZXQgc2VydmVyTG9nTGV2ZWwoKTogTmd4TG9nZ2VyTGV2ZWwge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5zZXJ2ZXJMb2dMZXZlbDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNvbmZpZyhjb25maWc6IExvZ2dlckNvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fY2xvbmUoY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGdldENvbmZpZygpIHtcclxuICAgIHJldHVybiB0aGlzLl9jbG9uZSh0aGlzLl9jb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETzogYWRkIHRlc3RzIGFyb3VuZCBjbG9uaW5nIHRoZSBjb25maWcuIHVwZGF0aW5nIGFuIG9iamVjdCBwYXNzZWQgaW50byB0aGUgY29uZmlnIChvciByZXRyaWV2aW5nIGZyb20gdGhlIGNvbmZpZylcclxuICAvLyBzaG91bGQgbm90IHVwZGF0ZSB0aGUgYWN0aXZlIGNvbmZpZywgdGhpcyBpcyBhIHNoYWxsb3cgY2xvbmUuIElmIG91ciBjb25maWcgZXZlciBiZWNvbWVzIGhpZXJhcmNoaWNhbCB3ZSBtdXN0IG1ha2VcclxuICAvLyB0aGlzIGEgZGVlcCBjbG9uZVxyXG4gIHByaXZhdGUgX2Nsb25lKG9iamVjdDogYW55KSB7XHJcbiAgICBjb25zdCBjbG9uZUNvbmZpZzogTG9nZ2VyQ29uZmlnID0gbmV3IExvZ2dlckNvbmZpZygpO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIGNsb25lQ29uZmlnW2tleV0gPSBvYmplY3Rba2V5XTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBjbG9uZUNvbmZpZztcclxuICB9XHJcbn1cclxuIl19