/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DEFAULT_COLOR_SCHEME } from '../resources/color-schemes';
import { NgxLoggerLevel } from '../types/logger-level.enum';
export class NGXLoggerUtils {
    /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    static prepareMetaString(timestamp, logLevel, fileName, lineNumber) {
        /** @type {?} */
        const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';
        return `${timestamp} ${logLevel}${fileDetails}`;
    }
    /**
     * @param {?} level
     * @param {?=} configColorScheme
     * @return {?}
     */
    static getColor(level, configColorScheme) {
        switch (level) {
            case NgxLoggerLevel.TRACE:
                return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);
            case NgxLoggerLevel.DEBUG:
                return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);
            case NgxLoggerLevel.INFO:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.LOG:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.WARN:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.ERROR:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.FATAL:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.OFF:
            default:
                return;
        }
    }
    /**
     * @private
     * @param {?} level
     * @param {?} configColorScheme
     * @return {?}
     */
    static getColorFromConfig(level, configColorScheme) {
        if (!configColorScheme) {
            return DEFAULT_COLOR_SCHEME[level];
        }
        return configColorScheme[level];
    }
    /**
     * @param {?} message
     * @return {?}
     */
    static prepareMessage(message) {
        try {
            if (typeof message !== 'string' && !(message instanceof Error)) {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            // additional = [message, ...additional];
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    }
    /**
     * @param {?} additional
     * @return {?}
     */
    static prepareAdditionalParameters(additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((/**
         * @param {?} next
         * @param {?} idx
         * @return {?}
         */
        (next, idx) => {
            try {
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return `The additional[${idx}] value could not be parsed using JSON.stringify().`;
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9sb2dnZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxNQUFNLE9BQU8sY0FBYzs7Ozs7Ozs7SUFFekIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQixFQUFFLFVBQWtCOztjQUMxRixXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUVsRSxPQUFPLEdBQUcsU0FBUyxJQUFJLFFBQVEsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQXFCLEVBQUUsaUJBQWlDO1FBQ3RFLFFBQVEsS0FBSyxFQUFFO1lBQ2IsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDdkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQzFFLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUN0QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDekUsS0FBSyxjQUFjLENBQUMsR0FBRztnQkFDckIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pFLEtBQUssY0FBYyxDQUFDLElBQUk7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDdkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQzFFLEtBQUssY0FBYyxDQUFDLEdBQUcsQ0FBQztZQUN4QjtnQkFDRSxPQUFPO1NBQ1Y7SUFDSCxDQUFDOzs7Ozs7O0lBRU8sTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQWEsRUFBRSxpQkFBZ0M7UUFDL0UsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLE9BQU8sb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFFRCxPQUFPLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPO1FBQzNCLElBQUk7WUFDRixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLEtBQUssQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLHlDQUF5QztZQUN6QyxPQUFPLEdBQUcseUVBQXlFLENBQUM7U0FDckY7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxVQUFpQjtRQUNsRCxJQUFJLFVBQVUsS0FBSyxJQUFJLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxVQUFVLENBQUMsR0FBRzs7Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNsQyxJQUFJO2dCQUNGLCtGQUErRjtnQkFDL0YsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO2dCQUVELE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLGtCQUFrQixHQUFHLHFEQUFxRCxDQUFDO2FBQ25GO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RFRkFVTFRfQ09MT1JfU0NIRU1FfSBmcm9tICcuLi9yZXNvdXJjZXMvY29sb3Itc2NoZW1lcyc7XHJcbmltcG9ydCB7Tmd4TG9nZ2VyTGV2ZWx9IGZyb20gJy4uL3R5cGVzL2xvZ2dlci1sZXZlbC5lbnVtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBOR1hMb2dnZXJVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBwcmVwYXJlTWV0YVN0cmluZyh0aW1lc3RhbXA6IHN0cmluZywgbG9nTGV2ZWw6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgbGluZU51bWJlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmaWxlRGV0YWlscyA9IGZpbGVOYW1lID8gYCBbJHtmaWxlTmFtZX06JHtsaW5lTnVtYmVyfV1gIDogJyc7XHJcblxyXG4gICAgcmV0dXJuIGAke3RpbWVzdGFtcH0gJHtsb2dMZXZlbH0ke2ZpbGVEZXRhaWxzfWA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0Q29sb3IobGV2ZWw6IE5neExvZ2dlckxldmVsLCBjb25maWdDb2xvclNjaGVtZT86IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgc3dpdGNoIChsZXZlbCkge1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLlRSQUNFOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5UUkFDRSwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkRFQlVHOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5ERUJVRywgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLklORk86XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLklORk8sIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5MT0c6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLklORk8sIGNvbmZpZ0NvbG9yU2NoZW1lKTtcclxuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5XQVJOOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5GQVRBTCwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkVSUk9SOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5GQVRBTCwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkZBVEFMOlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5GQVRBTCwgY29uZmlnQ29sb3JTY2hlbWUpO1xyXG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLk9GRjpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRDb2xvckZyb21Db25maWcobGV2ZWw6IG51bWJlciwgY29uZmlnQ29sb3JTY2hlbWU6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgaWYgKCFjb25maWdDb2xvclNjaGVtZSkge1xyXG4gICAgICByZXR1cm4gREVGQVVMVF9DT0xPUl9TQ0hFTUVbbGV2ZWxdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb25maWdDb2xvclNjaGVtZVtsZXZlbF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcHJlcGFyZU1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJyAmJiAhKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikpIHtcclxuICAgICAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMik7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gYWRkaXRpb25hbCA9IFttZXNzYWdlLCAuLi5hZGRpdGlvbmFsXTtcclxuICAgICAgbWVzc2FnZSA9ICdUaGUgcHJvdmlkZWQgXCJtZXNzYWdlXCIgdmFsdWUgY291bGQgbm90IGJlIHBhcnNlZCB3aXRoIEpTT04uc3RyaW5naWZ5KCkuJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVwYXJlQWRkaXRpb25hbFBhcmFtZXRlcnMoYWRkaXRpb25hbDogYW55W10pIHtcclxuICAgIGlmIChhZGRpdGlvbmFsID09PSBudWxsIHx8IGFkZGl0aW9uYWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWRkaXRpb25hbC5tYXAoKG5leHQsIGlkeCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFdlIGp1c3Qgd2FudCB0byBtYWtlIHN1cmUgdGhlIEpTT04gY2FuIGJlIHBhcnNlZCwgd2UgZG8gbm90IHdhbnQgdG8gYWN0dWFsbHkgY2hhbmdlIHRoZSB0eXBlXHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkobmV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBgVGhlIGFkZGl0aW9uYWxbJHtpZHh9XSB2YWx1ZSBjb3VsZCBub3QgYmUgcGFyc2VkIHVzaW5nIEpTT04uc3RyaW5naWZ5KCkuYDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=