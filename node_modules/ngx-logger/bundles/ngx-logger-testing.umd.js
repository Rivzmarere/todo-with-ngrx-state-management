(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ngx-logger'), require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-logger/testing', ['exports', 'ngx-logger', 'rxjs', '@angular/core'], factory) :
    (global = global || self, factory((global['ngx-logger'] = global['ngx-logger'] || {}, global['ngx-logger'].testing = {}), global['ngx-logger'], global.rxjs, global.ng.core));
}(this, function (exports, ngxLogger, rxjs, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NGXLoggerMock = /** @class */ (function () {
        function NGXLoggerMock() {
        }
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.trace = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.debug = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.info = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.log = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.warn = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.error = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        NGXLoggerMock.prototype.fatal = /**
         * @param {?} message
         * @param {...?} additional
         * @return {?}
         */
        function (message) {
            var additional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                additional[_i - 1] = arguments[_i];
            }
        };
        /**
         * @param {?} config
         * @return {?}
         */
        NGXLoggerMock.prototype.updateConfig = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
        };
        /**
         * @param {?} headers
         * @return {?}
         */
        NGXLoggerMock.prototype.setCustomHttpHeaders = /**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
        };
        /**
         * @param {?} params
         * @return {?}
         */
        NGXLoggerMock.prototype.setCustomParams = /**
         * @param {?} params
         * @return {?}
         */
        function (params) {
        };
        /**
         * @param {?} monitor
         * @return {?}
         */
        NGXLoggerMock.prototype.registerMonitor = /**
         * @param {?} monitor
         * @return {?}
         */
        function (monitor) {
        };
        /**
         * @param {?} withCredentials
         * @return {?}
         */
        NGXLoggerMock.prototype.setWithCredentialsOptionValue = /**
         * @param {?} withCredentials
         * @return {?}
         */
        function (withCredentials) {
        };
        /**
         * @return {?}
         */
        NGXLoggerMock.prototype.getConfigSnapshot = /**
         * @return {?}
         */
        function () {
            return new ngxLogger.LoggerConfig();
        };
        return NGXLoggerMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService
     */
    var   /**
     * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService
     */
    CustomNGXLoggerServiceMock = /** @class */ (function () {
        function CustomNGXLoggerServiceMock() {
        }
        /**
         * @return {?}
         */
        CustomNGXLoggerServiceMock.prototype.create = /**
         * @return {?}
         */
        function () {
            // you can inject your own httpService or use the default,
            return new NGXLoggerMock();
        };
        return CustomNGXLoggerServiceMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NGXLoggerHttpServiceMock = /** @class */ (function () {
        function NGXLoggerHttpServiceMock() {
        }
        /**
         * @param {?} url
         * @param {?} message
         * @param {?} additional
         * @param {?} timestamp
         * @param {?} logLevel
         * @return {?}
         */
        NGXLoggerHttpServiceMock.prototype.logOnServer = /**
         * @param {?} url
         * @param {?} message
         * @param {?} additional
         * @param {?} timestamp
         * @param {?} logLevel
         * @return {?}
         */
        function (url, message, additional, timestamp, logLevel) {
            return rxjs.of({});
        };
        return NGXLoggerHttpServiceMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NGXMapperServiceMock = /** @class */ (function () {
        function NGXMapperServiceMock() {
        }
        /**
         * @return {?}
         */
        NGXMapperServiceMock.prototype.getCallerDetails = /**
         * @return {?}
         */
        function () {
            return rxjs.of({ fileName: 'test.ts', lineNumber: 0, columnNumber: 0 });
        };
        return NGXMapperServiceMock;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoggerTestingModule = /** @class */ (function () {
        function LoggerTestingModule() {
        }
        LoggerTestingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ngxLogger.LoggerModule],
                        providers: [
                            { provide: ngxLogger.NGXLogger, useClass: NGXLoggerMock },
                            { provide: ngxLogger.NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },
                            { provide: ngxLogger.CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                            { provide: ngxLogger.NGXMapperService, useClass: NGXMapperServiceMock }
                        ]
                    },] }
        ];
        return LoggerTestingModule;
    }());

    exports.CustomNGXLoggerServiceMock = CustomNGXLoggerServiceMock;
    exports.LoggerTestingModule = LoggerTestingModule;
    exports.NGXLoggerHttpServiceMock = NGXLoggerHttpServiceMock;
    exports.NGXLoggerMock = NGXLoggerMock;
    exports.NGXMapperServiceMock = NGXMapperServiceMock;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-logger-testing.umd.js.map
