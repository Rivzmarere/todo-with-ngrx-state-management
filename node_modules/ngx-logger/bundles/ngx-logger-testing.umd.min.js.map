{"version":3,"sources":["ng://ngx-logger/testing/lib/logger.service.mock.ts","ng://ngx-logger/testing/lib/custom-logger.service.mock.ts","ng://ngx-logger/testing/lib/http.service.mock.ts","ng://ngx-logger/testing/lib/mapper.service.mock.ts","ng://ngx-logger/testing/lib/logger-testing.module.ts"],"names":["NGXLoggerMock","prototype","trace","message","additional","_i","arguments","length","debug","info","log","warn","error","fatal","updateConfig","config","setCustomHttpHeaders","headers","setCustomParams","params","registerMonitor","monitor","setWithCredentialsOptionValue","withCredentials","getConfigSnapshot","LoggerConfig","CustomNGXLoggerServiceMock","create","NGXLoggerHttpServiceMock","logOnServer","url","timestamp","logLevel","of","NGXMapperServiceMock","getCallerDetails","fileName","lineNumber","columnNumber","LoggerTestingModule","NgModule","args","imports","LoggerModule","providers","provide","NGXLogger","useClass","NGXLoggerHttpService","CustomNGXLoggerService","NGXMapperService"],"mappings":"uZACA,IAAAA,EAAA,WAIE,SAAAA,KA2CF,OAxCEA,EAAAC,UAAAC,MAAA,SAAMC,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGpBL,EAAAC,UAAAO,MAAA,SAAML,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGpBL,EAAAC,UAAAQ,KAAA,SAAKN,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGnBL,EAAAC,UAAAS,IAAA,SAAIP,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGlBL,EAAAC,UAAAU,KAAA,SAAKR,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGnBL,EAAAC,UAAAW,MAAA,SAAMT,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGpBL,EAAAC,UAAAY,MAAA,SAAMV,OAAc,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,IAGpBL,EAAAC,UAAAa,aAAA,SAAaC,KAIbf,EAAAC,UAAAe,qBAAA,SAAqBC,KAGrBjB,EAAAC,UAAAiB,gBAAA,SAAgBC,KAGhBnB,EAAAC,UAAAmB,gBAAA,SAAgBC,KAGhBrB,EAAAC,UAAAqB,8BAAA,SAA8BC,KAG9BvB,EAAAC,UAAAuB,kBAAA,WACE,OAAO,IAAIC,EAAAA,cAEfzB,EA/CA,gBCME,SAAA0B,KAOF,OAJEA,EAAAzB,UAAA0B,OAAA,WAEE,OAAO,IAAI3B,GAEf0B,KCdAE,EAAA,WAGE,SAAAA,KAOF,OAHEA,EAAA3B,UAAA4B,YAAA,SAAYC,EAAa3B,EAAiBC,EAAmB2B,EAAmBC,GAC9E,OAAOC,EAAAA,GAAG,KAEdL,EAVA,GCAAM,EAAA,WAGE,SAAAA,KAOF,OAHSA,EAAAjC,UAAAkC,iBAAP,WACE,OAAOF,EAAAA,GAAG,CAACG,SAAU,UAAWC,WAAY,EAAGC,aAAc,KAEjEJ,EAVA,GCAAK,EAAA,WAcA,SAAAA,KASkC,2BATjCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAACC,EAAAA,cACVC,UAAW,CACT,CAAEC,QAASC,EAAAA,UAAWC,SAAU/C,GAChC,CAAE6C,QAASG,EAAAA,qBAAsBD,SAAUnB,GAC3C,CAAEiB,QAASI,EAAAA,uBAAwBF,SAAUrB,GAC7C,CAAEmB,QAASK,EAAAA,iBAAkBH,SAAUb,QAGTK,EAvBlC","sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\r\n\r\nexport class NGXLoggerMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  trace(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  debug(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  info(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  log(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  warn(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  error(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: NGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): LoggerConfig {\r\n    return new LoggerConfig();\r\n  }\r\n}\r\n","import {NGXLoggerMock} from './logger.service.mock';\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  create(): NGXLoggerMock {\r\n    // you can inject your own httpService or use the default,\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import {Observable, of} from 'rxjs';\r\n\r\nexport class NGXLoggerHttpServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Observable, of} from 'rxjs';\r\n\r\nexport class NGXMapperServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\r\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXMapperServiceMock } from './mapper.service.mock';\r\nimport {\r\n  LoggerModule,\r\n  NGXLogger,\r\n  NGXLoggerHttpService,\r\n  CustomNGXLoggerService,\r\n  NGXMapperService\r\n} from 'ngx-logger';\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\r\n  ]\r\n})\r\nexport class LoggerTestingModule {}\r\n"]}