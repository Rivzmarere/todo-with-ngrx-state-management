{"version":3,"file":"ngx-logger.js","sources":["ng://ngx-logger/lib/http.service.ts","ng://ngx-logger/lib/types/logger-level.enum.ts","ng://ngx-logger/lib/logger.config.ts","ng://ngx-logger/lib/config.engine.ts","ng://ngx-logger/lib/resources/color-schemes.ts","ng://ngx-logger/lib/utils/logger.utils.ts","ng://ngx-logger/lib/types/log-position.ts","ng://ngx-logger/lib/mapper.service.ts","ng://ngx-logger/lib/logger.service.ts","ng://ngx-logger/lib/custom-logger.service.ts","ng://ngx-logger/lib/logger.module.ts","ng://ngx-logger/lib/logger-monitor.ts","ng://ngx-logger/lib/types/ngx-log.interface.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {filter, map} from 'rxjs/operators';\r\nimport { NGXLogInterface } from './types/ngx-log.interface';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerHttpService {\r\n  constructor(private readonly httpBackend: HttpBackend) { }\r\n\r\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\r\n    // HttpBackend skips all HttpInterceptors\r\n    // They may log errors using this service causing circular calls\r\n    const req = new HttpRequest<any>('POST', url, log, options || {});\r\n    return this.httpBackend.handle(req).pipe(\r\n      filter(e => e instanceof HttpResponse),\r\n      map<HttpResponse<any>, any>((httpResponse: HttpResponse<any>) => httpResponse.body)\r\n    );\r\n  }\r\n\r\n}\r\n","export enum NgxLoggerLevel {\r\n  TRACE = 0,\r\n  DEBUG = 1,\r\n  INFO = 2,\r\n  LOG = 3,\r\n  WARN = 4,\r\n  ERROR = 5,\r\n  FATAL = 6,\r\n  OFF = 7\r\n}\r\n","import { LoggerColorScheme } from \"./types/logger-color-scheme\";\r\nimport { NgxLoggerLevel } from \"./types/logger-level.enum\";\r\n\r\nexport class LoggerConfig {\r\n  level: NgxLoggerLevel;\r\n  serverLogLevel?: NgxLoggerLevel;\r\n  serverLoggingUrl?: string;\r\n  disableConsoleLogging?: boolean;\r\n  httpResponseType?: \"arraybuffer\" | \"blob\" | \"text\" | \"json\";\r\n  enableSourceMaps?: boolean;\r\n  /** Number of calls that will be ignored when trying to get line of stacktrace */\r\n  proxiedSteps?: number;\r\n  /** Timestamp format: any format accepted by Angular DatePipe. Defaults to ISOString */\r\n  timestampFormat?: string;\r\n  colorScheme?: LoggerColorScheme;\r\n  disableFileDetails?: boolean;\r\n}\r\n","import {LoggerConfig} from './logger.config';\r\nimport { NgxLoggerLevel } from './types/logger-level.enum';\r\n\r\nexport class NGXLoggerConfigEngine {\r\n\r\n  private _config: LoggerConfig;\r\n  constructor(readonly config: LoggerConfig) {\r\n    this._config = config;\r\n  }\r\n\r\n  /** Get a readonly access to the level configured for the NGXLogger */\r\n  get level(): NgxLoggerLevel {\r\n    return this._config.level;\r\n  }\r\n\r\n  /** Get a readonly access to the serverLogLevel configured for the NGXLogger */\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return this._config.serverLogLevel;\r\n  }\r\n\r\n  updateConfig(config: LoggerConfig) {\r\n    this._config = this._clone(config);\r\n  }\r\n\r\n  getConfig() {\r\n    return this._clone(this._config);\r\n  }\r\n\r\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\r\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\r\n  // this a deep clone\r\n  private _clone(object: any) {\r\n    const cloneConfig: LoggerConfig = new LoggerConfig();\r\n\r\n    Object.keys(object).forEach((key) => {\r\n      cloneConfig[key] = object[key];\r\n    });\r\n\r\n    return cloneConfig;\r\n  }\r\n}\r\n","import {LoggerColorScheme} from '../types/logger-color-scheme';\r\n\r\nexport const DEFAULT_COLOR_SCHEME: LoggerColorScheme = [\r\n  'purple',\r\n  'teal',\r\n  'gray',\r\n  'gray',\r\n  'red',\r\n  'red',\r\n  'red'\r\n];\r\n","import {DEFAULT_COLOR_SCHEME} from '../resources/color-schemes';\r\nimport {NgxLoggerLevel} from '../types/logger-level.enum';\r\n\r\nexport class NGXLoggerUtils {\r\n\r\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\r\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\r\n\r\n    return `${timestamp} ${logLevel}${fileDetails}`;\r\n  }\r\n\r\n  static getColor(level: NgxLoggerLevel, configColorScheme?: Array<string>): string | undefined {\r\n    switch (level) {\r\n      case NgxLoggerLevel.TRACE:\r\n        return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);\r\n      case NgxLoggerLevel.DEBUG:\r\n        return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);\r\n      case NgxLoggerLevel.INFO:\r\n        return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);\r\n      case NgxLoggerLevel.LOG:\r\n        return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);\r\n      case NgxLoggerLevel.WARN:\r\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\r\n      case NgxLoggerLevel.ERROR:\r\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\r\n      case NgxLoggerLevel.FATAL:\r\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\r\n      case NgxLoggerLevel.OFF:\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  private static getColorFromConfig(level: number, configColorScheme: Array<string>): string | undefined {\r\n    if (!configColorScheme) {\r\n      return DEFAULT_COLOR_SCHEME[level];\r\n    }\r\n\r\n    return configColorScheme[level];\r\n  }\r\n\r\n  static prepareMessage(message) {\r\n    try {\r\n      if (typeof message !== 'string' && !(message instanceof Error)) {\r\n        message = JSON.stringify(message, null, 2);\r\n      }\r\n    } catch (e) {\r\n      // additional = [message, ...additional];\r\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  static prepareAdditionalParameters(additional: any[]) {\r\n    if (additional === null || additional === undefined) {\r\n      return null;\r\n    }\r\n\r\n    return additional.map((next, idx) => {\r\n      try {\r\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\r\n        if (typeof next === 'object') {\r\n          JSON.stringify(next);\r\n        }\r\n\r\n        return next;\r\n      } catch (e) {\r\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export class LogPosition {\r\n  constructor(\r\n    public fileName: string,\r\n    public lineNumber: number,\r\n    public columnNumber: number\r\n  ) {}\r\n  toString() {\r\n    return this.fileName + ':' + this.lineNumber + ':' + this.columnNumber;\r\n  }\r\n}\r\n","import { SourceMap } from '@angular/compiler';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';\r\nimport * as vlq from 'vlq';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, filter, map, retry, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { LogPosition } from './types/log-position';\r\n\r\n@Injectable()\r\nexport class NGXMapperService {\r\n\r\n  // cache for source maps, key is source map location, ie. 'http://localhost:4200/main.js.map'\r\n  private sourceMapCache: Map<string, Observable<SourceMap>> = new Map();\r\n\r\n  // cache for specific log position, key is the dist position, ie 'main.js:339:21'\r\n  private logPositionCache: Map<string, Observable<LogPosition>> = new Map();\r\n\r\n  constructor(private httpBackend: HttpBackend) {\r\n  }\r\n\r\n  /*\r\n  Static Functions\r\n */\r\n  private static getStackLine(proxiedSteps: number): string {\r\n    const error = new Error();\r\n\r\n    try {\r\n      // noinspection ExceptionCaughtLocallyJS\r\n      throw error;\r\n    } catch (e) {\r\n\r\n      try {\r\n        // Here are different examples of stacktrace \r\n\r\n        // Firefox (last line is the user code, the 4 first are ours):\r\n        // getStackLine@http://localhost:4200/main.js:358:23\r\n        // getCallerDetails@http://localhost:4200/main.js:557:44\r\n        // _log@http://localhost:4200/main.js:830:28\r\n        // debug@http://localhost:4200/main.js:652:14\r\n        // handleLog@http://localhost:4200/main.js:1158:29\r\n\r\n        // Chrome and Edge (last line is the user code):\r\n        // Error\r\n        // at Function.getStackLine (ngx-logger.js:329)\r\n        // at NGXMapperService.getCallerDetails (ngx-logger.js:528)\r\n        // at NGXLogger._log (ngx-logger.js:801)\r\n        // at NGXLogger.info (ngx-logger.js:631)\r\n        // at AppComponent.handleLog (app.component.ts:38)\r\n\r\n        let defaultProxy = 4; // We make 4 functions call before getting here\r\n        const firstStackLine = error.stack.split('\\n')[0];\r\n        if (!firstStackLine.includes('.js:')) {\r\n          // The stacktrace starts with no function call (example in Chrome or Edge)\r\n          defaultProxy = defaultProxy + 1;\r\n        }\r\n\r\n        return error.stack.split('\\n')[(defaultProxy + (proxiedSteps || 0))];\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private static getPosition(stackLine: string): LogPosition {\r\n    // strip base path, then parse filename, line, and column\r\n    const positionStartIndex = stackLine.lastIndexOf('\\/');\r\n    let positionEndIndex = stackLine.indexOf(')');\r\n    if (positionEndIndex < 0) {\r\n      positionEndIndex = undefined;\r\n    }\r\n\r\n    const position = stackLine.substring(positionStartIndex + 1, positionEndIndex);\r\n    const dataArray = position.split(':');\r\n    if (dataArray.length === 3) {\r\n      return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);\r\n    }\r\n    return new LogPosition('unknown', 0, 0);\r\n  }\r\n\r\n  private static getTranspileLocation(stackLine: string): string {\r\n    // Example stackLine:\r\n    // Firefox : getStackLine@http://localhost:4200/main.js:358:23\r\n    // Chrome and Edge : at Function.getStackLine (ngx-logger.js:329)\r\n    let locationStartIndex = stackLine.indexOf('(');\r\n    if (locationStartIndex < 0) {\r\n      locationStartIndex = stackLine.lastIndexOf('@');\r\n      if (locationStartIndex < 0) {\r\n        locationStartIndex = stackLine.lastIndexOf(' ');\r\n      }\r\n    }\r\n\r\n    let locationEndIndex = stackLine.indexOf(')');\r\n    if (locationEndIndex < 0) {\r\n      locationEndIndex = undefined;\r\n    }\r\n\r\n    return stackLine.substring(locationStartIndex + 1, locationEndIndex);\r\n  }\r\n\r\n  private static getMapFilePath(stackLine: string): string {\r\n    const file = NGXMapperService.getTranspileLocation(stackLine);\r\n    const mapFullPath = file.substring(0, file.lastIndexOf(':'));\r\n    return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';\r\n  }\r\n\r\n  private static getMapping(sourceMap: SourceMap, position: LogPosition): LogPosition {\r\n    // => ';' indicates end of a line\r\n    // => ',' separates mappings in a line\r\n    // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\r\n    let sourceFileIndex = 0,   // second field\r\n      sourceCodeLine = 0,    // third field\r\n      sourceCodeColumn = 0;  // fourth field\r\n\r\n    const lines = sourceMap.mappings.split(';');\r\n\r\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\r\n      // reset column position to 0 after each line\r\n      let generatedCodeColumn = 0;\r\n      // decode sections in line\r\n      const columns = lines[lineIndex].split(',');\r\n\r\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\r\n        const decodedSection = vlq.decode(columns[columnIndex]);\r\n        if (decodedSection.length >= 4) {\r\n          // update relative positions\r\n          generatedCodeColumn += decodedSection[0];\r\n          sourceFileIndex += decodedSection[1];\r\n          sourceCodeLine += decodedSection[2];\r\n          sourceCodeColumn += decodedSection[3];\r\n        }\r\n\r\n        // check if matching map\r\n        if (lineIndex === position.lineNumber) {\r\n          if (generatedCodeColumn === position.columnNumber) {\r\n            // matching column and line found\r\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);\r\n          } else if (columnIndex + 1 === columns.length) {\r\n            // matching column not found, but line is correct\r\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // failed if reached\r\n    return new LogPosition('unknown', 0, 0);\r\n  }\r\n\r\n  /**\r\n   * does the http get request to get the source map\r\n   * @param sourceMapLocation\r\n   * @param distPosition\r\n   */\r\n  private _getSourceMap(sourceMapLocation: string, distPosition: LogPosition): Observable<LogPosition> {\r\n    const req = new HttpRequest<SourceMap>('GET', sourceMapLocation);\r\n    const distPositionKey = distPosition.toString();\r\n\r\n    // if the specific log position is already in cache return it\r\n    if (this.logPositionCache.has(distPositionKey)) {\r\n      return this.logPositionCache.get(distPositionKey);\r\n    }\r\n\r\n    // otherwise check if the source map is already cached for given source map location\r\n    if (!this.sourceMapCache.has(sourceMapLocation)) {\r\n      // obtain the source map if not cached\r\n      this.sourceMapCache.set(\r\n        sourceMapLocation,\r\n        this.httpBackend.handle(req).pipe(\r\n          filter((e) => e instanceof HttpResponse),\r\n          map<HttpResponse<SourceMap>, SourceMap>(\r\n            (httpResponse: HttpResponse<SourceMap>) => httpResponse.body\r\n          ),\r\n          retry(3),\r\n          shareReplay(1)\r\n        )\r\n      );\r\n    }\r\n\r\n    // at this point the source map is cached, use it to get specific log position mapping\r\n    const logPosition$ = this.sourceMapCache.get(sourceMapLocation).pipe(\r\n      map<SourceMap, LogPosition>((sourceMap) =>\r\n        // map generated position to source position\r\n        NGXMapperService.getMapping(sourceMap, distPosition)\r\n      ),\r\n      catchError(() => of(distPosition)),\r\n      shareReplay(1)\r\n    );\r\n\r\n    // store specific log position in cache for given dest position and return it\r\n    this.logPositionCache.set(distPositionKey, logPosition$);\r\n\r\n    return logPosition$;\r\n  }\r\n\r\n  /**\r\n   * Returns the LogPosition for the current log\r\n   * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name\r\n   * and number of the call\r\n   * @param sourceMapsEnabled\r\n   * @param proxiedSteps\r\n   */\r\n  public getCallerDetails(sourceMapsEnabled: boolean, proxiedSteps: number): Observable<LogPosition> {\r\n    // parse generated file mapping from stack trace\r\n\r\n    const stackLine = NGXMapperService.getStackLine(proxiedSteps);\r\n\r\n    // if we were not able to parse the stackLine, just return an empty Log Position\r\n    if (!stackLine) {\r\n      return of(new LogPosition('', 0, 0));\r\n    }\r\n\r\n    return of([\r\n      NGXMapperService.getPosition(stackLine),\r\n      NGXMapperService.getMapFilePath(stackLine)\r\n    ]).pipe(\r\n      switchMap<[LogPosition, string], Observable<LogPosition>>(([distPosition, sourceMapLocation]) => {\r\n\r\n        // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,\r\n        // then just use the position of the JS instead of the source\r\n        if (!sourceMapsEnabled) {\r\n          return of(distPosition);\r\n        }\r\n\r\n        // finally try to get the source map and return the position\r\n        return this._getSourceMap(sourceMapLocation, distPosition);\r\n      })\r\n    );\r\n\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { isPlatformBrowser, DatePipe } from '@angular/common';\r\n\r\nimport { NGXLoggerHttpService } from './http.service';\r\nimport { LogPosition } from './types/log-position';\r\nimport { NgxLoggerLevel } from './types/logger-level.enum';\r\nimport { LoggerConfig } from './logger.config';\r\nimport { NGXLoggerConfigEngine } from './config.engine';\r\nimport { NGXLoggerUtils } from './utils/logger.utils';\r\nimport { NGXLoggerMonitor } from './logger-monitor';\r\nimport { NGXLogInterface } from './types/ngx-log.interface';\r\nimport { NGXMapperService } from './mapper.service';\r\n\r\nexport const Levels = [\r\n  'TRACE',\r\n  'DEBUG',\r\n  'INFO',\r\n  'LOG',\r\n  'WARN',\r\n  'ERROR',\r\n  'FATAL',\r\n  'OFF'\r\n];\r\n\r\n\r\n@Injectable()\r\nexport class NGXLogger {\r\n  private readonly _isIE: boolean;\r\n  private readonly _logFunc: Function;\r\n  private config: NGXLoggerConfigEngine;\r\n  private _customHttpHeaders: HttpHeaders;\r\n  private _customParams: HttpParams;\r\n  private _withCredentials: boolean = false;\r\n\r\n  private _loggerMonitor: NGXLoggerMonitor;\r\n\r\n  constructor(private readonly mapperService: NGXMapperService, private readonly httpService: NGXLoggerHttpService,\r\n    loggerConfig: LoggerConfig, @Inject(PLATFORM_ID) private platformId,\r\n    private readonly datePipe: DatePipe) {\r\n    this._isIE = isPlatformBrowser(platformId) && navigator && navigator.userAgent &&\r\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\r\n\r\n    // each instance of the logger should have their own config engine\r\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\r\n\r\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\r\n\r\n  }\r\n\r\n  /** Get a readonly access to the level configured for the NGXLogger */\r\n  get level(): NgxLoggerLevel {\r\n    return this.config.level;\r\n  }\r\n\r\n  /** Get a readonly access to the serverLogLevel configured for the NGXLogger */\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return this.config.serverLogLevel;\r\n  }\r\n\r\n  public trace(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.TRACE, message, additional);\r\n  }\r\n\r\n  public debug(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\r\n  }\r\n\r\n  public info(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.INFO, message, additional);\r\n  }\r\n\r\n  public log(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.LOG, message, additional);\r\n  }\r\n\r\n  public warn(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.WARN, message, additional);\r\n  }\r\n\r\n  public error(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.ERROR, message, additional);\r\n  }\r\n\r\n  public fatal(message, ...additional: any[]): void {\r\n    this._log(NgxLoggerLevel.FATAL, message, additional);\r\n  }\r\n\r\n  public setCustomHttpHeaders(headers: HttpHeaders) {\r\n    this._customHttpHeaders = headers;\r\n  }\r\n\r\n  public setCustomParams(params: HttpParams) {\r\n    this._customParams = params;\r\n  }\r\n\r\n  public setWithCredentialsOptionValue(withCredentials: boolean) {\r\n    this._withCredentials = withCredentials;\r\n  }\r\n\r\n  public registerMonitor(monitor: NGXLoggerMonitor) {\r\n    this._loggerMonitor = monitor;\r\n  }\r\n\r\n  public updateConfig(config: LoggerConfig) {\r\n    this.config.updateConfig(config);\r\n  }\r\n\r\n  public getConfigSnapshot(): LoggerConfig {\r\n    return this.config.getConfig();\r\n  }\r\n\r\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\r\n\r\n    // Coloring doesn't work in IE\r\n    // make sure additional isn't null or undefined so that ...additional doesn't error\r\n    additional = additional || [];\r\n\r\n    switch (level) {\r\n      case NgxLoggerLevel.WARN:\r\n        console.warn(`${metaString} `, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.ERROR:\r\n      case NgxLoggerLevel.FATAL:\r\n        console.error(`${metaString} `, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.INFO:\r\n        console.info(`${metaString} `, message, ...additional);\r\n        break;\r\n      default:\r\n        console.log(`${metaString} `, message, ...additional);\r\n    }\r\n  }\r\n\r\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\r\n    const configuredColors = this.getConfigSnapshot().colorScheme;\r\n    const color = NGXLoggerUtils.getColor(level, configuredColors);\r\n\r\n    // make sure additional isn't null or undefined so that ...additional doesn't error\r\n    additional = additional || [];\r\n\r\n    switch (level) {\r\n      case NgxLoggerLevel.WARN:\r\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.ERROR:\r\n      case NgxLoggerLevel.FATAL:\r\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      case NgxLoggerLevel.INFO:\r\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\r\n      // the console.trace statement\r\n      // case NgxLoggerLevel.TRACE:\r\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n      //   break;\r\n\r\n      case NgxLoggerLevel.DEBUG:\r\n        console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n        break;\r\n      default:\r\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\r\n    }\r\n  }\r\n\r\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\r\n    const config = this.config.getConfig();\r\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\r\n    const isLogLevelEnabled = level >= config.level;\r\n\r\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\r\n      return;\r\n    }\r\n\r\n    const logLevelString = Levels[level];\r\n\r\n    message = typeof message === 'function' ? message() : message;\r\n\r\n    // only use validated parameters for HTTP requests\r\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\r\n\r\n    const timestamp = config.timestampFormat ?\r\n      this.datePipe.transform(new Date(), config.timestampFormat) :\r\n      new Date().toISOString();\r\n\r\n    this.mapperService.getCallerDetails(config.enableSourceMaps, config.proxiedSteps).subscribe((callerDetails: LogPosition) => {\r\n      const logObject: NGXLogInterface = {\r\n        // prepareMessage is needed to match NGXLogInterface\r\n        // Even though I think message should be of type any (same as console.xxx signature)\r\n        // I'm not doing this right now as this would be a breaking change\r\n        message: NGXLoggerUtils.prepareMessage(message),\r\n        additional: validatedAdditionalParameters,\r\n        level: level,\r\n        timestamp: timestamp,\r\n        fileName: callerDetails.fileName,\r\n        lineNumber: callerDetails.lineNumber.toString()\r\n      };\r\n\r\n      if (this._loggerMonitor && isLogLevelEnabled) {\r\n        this._loggerMonitor.onLog(logObject);\r\n      }\r\n\r\n      if (isLog2Server) {\r\n        // make sure the stack gets sent to the server (without altering the message for console logging)\r\n        logObject.message = message instanceof Error ? message.stack : message;\r\n        logObject.message = NGXLoggerUtils.prepareMessage(logObject.message);\r\n\r\n        const headers = this._customHttpHeaders || new HttpHeaders();\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        const options = {\r\n          headers: headers,\r\n          params: this._customParams || new HttpParams(),\r\n          responseType: config.httpResponseType || 'json',\r\n          withCredentials: this._withCredentials\r\n        };\r\n        // Allow logging on server even if client log level is off\r\n        this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\r\n          // I don't think we should do anything on success\r\n        },\r\n          (error: HttpErrorResponse) => {\r\n            this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n      // if no message or the log level is less than the environ\r\n      if (isLogLevelEnabled && !config.disableConsoleLogging) {\r\n        const metaString = NGXLoggerUtils.prepareMetaString(\r\n          timestamp,\r\n          logLevelString,\r\n          config.disableFileDetails ? null : callerDetails.fileName,\r\n          callerDetails.lineNumber.toString()\r\n        );\r\n\r\n        return this._logFunc(level, metaString, message, additional);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport {LoggerConfig} from './logger.config';\r\nimport {NGXLoggerHttpService} from './http.service';\r\nimport {NGXLogger} from './logger.service';\r\nimport {NGXLoggerMonitor} from './logger-monitor';\r\nimport {NGXMapperService} from './mapper.service';\r\n\r\n\r\n/**\r\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerService {\r\n\r\n  constructor(private readonly mapperService: NGXMapperService,\r\n              private readonly httpService: NGXLoggerHttpService,\r\n              @Inject(PLATFORM_ID) private readonly platformId, private readonly datePipe: DatePipe) {\r\n  }\r\n\r\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor,\r\n         mapperService?: NGXMapperService): NGXLogger {\r\n    // you can inject your own httpService or use the default,\r\n    const logger = new NGXLogger(mapperService || this.mapperService,\r\n      httpService || this.httpService, config, this.platformId, this.datePipe);\r\n\r\n    if (logMonitor) {\r\n      logger.registerMonitor(logMonitor);\r\n    }\r\n\r\n    return logger;\r\n  }\r\n}\r\n\r\n\r\n","import {CommonModule, DatePipe} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\n\r\nimport {NGXLogger} from './logger.service';\r\nimport {LoggerConfig} from './logger.config';\r\nimport {CustomNGXLoggerService} from './custom-logger.service';\r\nimport {NGXLoggerHttpService} from './http.service';\r\nimport {NGXMapperService} from './mapper.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    NGXLogger,\r\n    NGXLoggerHttpService,\r\n    CustomNGXLoggerService,\r\n    NGXMapperService,\r\n    DatePipe\r\n  ]\r\n})\r\nexport class LoggerModule {\r\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        {provide: LoggerConfig, useValue: config || {}},\r\n        NGXLogger,\r\n        NGXLoggerHttpService,\r\n        CustomNGXLoggerService,\r\n        NGXMapperService\r\n      ]\r\n    };\r\n  }\r\n  static forChild(): ModuleWithProviders<LoggerModule> {\r\n    return {\r\n      ngModule: LoggerModule,\r\n      providers: [\r\n        NGXLogger,\r\n        NGXLoggerHttpService,\r\n        CustomNGXLoggerService,\r\n        NGXMapperService\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import {NGXLogInterface} from './types/ngx-log.interface';\r\n\r\nexport abstract class NGXLoggerMonitor {\r\n  abstract onLog(logObject: NGXLogInterface): void;\r\n}\r\n","import {NgxLoggerLevel} from './logger-level.enum';\r\n\r\nexport class NGXLogInterface {\r\n  level: NgxLoggerLevel;\r\n  timestamp: string;\r\n  fileName: string;\r\n  lineNumber: string;\r\n  message: string;\r\n  additional: any[];\r\n}\r\n"],"names":["vlq.decode"],"mappings":"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"}