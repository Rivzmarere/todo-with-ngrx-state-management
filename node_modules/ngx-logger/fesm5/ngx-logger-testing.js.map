{"version":3,"file":"ngx-logger-testing.js","sources":["ng://ngx-logger/testing/lib/logger.service.mock.ts","ng://ngx-logger/testing/lib/custom-logger.service.mock.ts","ng://ngx-logger/testing/lib/http.service.mock.ts","ng://ngx-logger/testing/lib/mapper.service.mock.ts","ng://ngx-logger/testing/lib/logger-testing.module.ts"],"sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\r\n\r\nexport class NGXLoggerMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  trace(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  debug(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  info(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  log(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  warn(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  error(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message: any, ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: NGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): LoggerConfig {\r\n    return new LoggerConfig();\r\n  }\r\n}\r\n","import {NGXLoggerMock} from './logger.service.mock';\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  create(): NGXLoggerMock {\r\n    // you can inject your own httpService or use the default,\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import {Observable, of} from 'rxjs';\r\n\r\nexport class NGXLoggerHttpServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\r\n    return of({});\r\n  }\r\n}\r\n","import {Observable, of} from 'rxjs';\r\n\r\nexport class NGXMapperServiceMock {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\r\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXMapperServiceMock } from './mapper.service.mock';\r\nimport {\r\n  LoggerModule,\r\n  NGXLogger,\r\n  NGXLoggerHttpService,\r\n  CustomNGXLoggerService,\r\n  NGXMapperService\r\n} from 'ngx-logger';\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\r\n  ]\r\n})\r\nexport class LoggerTestingModule {}\r\n"],"names":[],"mappings":";;;;;;;;AACA;IAIE;KACC;;;;;;IAED,6BAAK;;;;;IAAL,UAAM,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACvC;;;;;;IAED,6BAAK;;;;;IAAL,UAAM,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACvC;;;;;;IAED,4BAAI;;;;;IAAJ,UAAK,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACtC;;;;;;IAED,2BAAG;;;;;IAAH,UAAI,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACrC;;;;;;IAED,4BAAI;;;;;IAAJ,UAAK,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACtC;;;;;;IAED,6BAAK;;;;;IAAL,UAAM,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACvC;;;;;;IAED,6BAAK;;;;;IAAL,UAAM,OAAY;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;KACvC;;;;;IAED,oCAAY;;;;IAAZ,UAAa,MAAW;KAEvB;;;;;IAED,4CAAoB;;;;IAApB,UAAqB,OAAoB;KACxC;;;;;IAED,uCAAe;;;;IAAf,UAAgB,MAAkB;KACjC;;;;;IAED,uCAAe;;;;IAAf,UAAgB,OAAyB;KACxC;;;;;IAED,qDAA6B;;;;IAA7B,UAA8B,eAAwB;KACrD;;;;IAED,yCAAiB;;;IAAjB;QACE,OAAO,IAAI,YAAY,EAAE,CAAC;KAC3B;IACH,oBAAC;CAAA;;;;;;AChDD;;;AAKA;;;;IAEE;KACC;;;;IAED,2CAAM;;;IAAN;;QAEE,OAAO,IAAI,aAAa,EAAE,CAAC;KAC5B;IACH,iCAAC;CAAA;;;;;;ACdD;IAGE;KAEC;;;;;;;;;IAED,8CAAW;;;;;;;;IAAX,UAAY,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB;QAC9F,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;KACf;IACH,+BAAC;CAAA;;;;;;ACVD;IAGE;KAEC;;;;IAEM,+CAAgB;;;IAAvB;QACE,OAAO,EAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC,CAAC;KAClE;IACH,2BAAC;CAAA;;;;;;ACVD;IAcA;KASmC;;gBATlC,QAAQ,SAAC;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,SAAS,EAAE;wBACT,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;wBAC/C,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,wBAAwB,EAAE;wBACrE,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;wBACzE,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAE;qBAC9D;iBACF;;IACiC,0BAAC;CATnC;;;;"}