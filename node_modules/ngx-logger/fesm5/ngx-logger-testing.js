import { LoggerConfig, LoggerModule, NGXLogger, NGXLoggerHttpService, CustomNGXLoggerService, NGXMapperService } from 'ngx-logger';
import { of } from 'rxjs';
import { NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NGXLoggerMock = /** @class */ (function () {
    function NGXLoggerMock() {
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.trace = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.debug = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.info = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.log = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.warn = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.error = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.fatal = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NGXLoggerMock.prototype.updateConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    NGXLoggerMock.prototype.setCustomHttpHeaders = /**
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * @param {?} params
     * @return {?}
     */
    NGXLoggerMock.prototype.setCustomParams = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
    };
    /**
     * @param {?} monitor
     * @return {?}
     */
    NGXLoggerMock.prototype.registerMonitor = /**
     * @param {?} monitor
     * @return {?}
     */
    function (monitor) {
    };
    /**
     * @param {?} withCredentials
     * @return {?}
     */
    NGXLoggerMock.prototype.setWithCredentialsOptionValue = /**
     * @param {?} withCredentials
     * @return {?}
     */
    function (withCredentials) {
    };
    /**
     * @return {?}
     */
    NGXLoggerMock.prototype.getConfigSnapshot = /**
     * @return {?}
     */
    function () {
        return new LoggerConfig();
    };
    return NGXLoggerMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService
 */
var  /**
 * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService
 */
CustomNGXLoggerServiceMock = /** @class */ (function () {
    function CustomNGXLoggerServiceMock() {
    }
    /**
     * @return {?}
     */
    CustomNGXLoggerServiceMock.prototype.create = /**
     * @return {?}
     */
    function () {
        // you can inject your own httpService or use the default,
        return new NGXLoggerMock();
    };
    return CustomNGXLoggerServiceMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NGXLoggerHttpServiceMock = /** @class */ (function () {
    function NGXLoggerHttpServiceMock() {
    }
    /**
     * @param {?} url
     * @param {?} message
     * @param {?} additional
     * @param {?} timestamp
     * @param {?} logLevel
     * @return {?}
     */
    NGXLoggerHttpServiceMock.prototype.logOnServer = /**
     * @param {?} url
     * @param {?} message
     * @param {?} additional
     * @param {?} timestamp
     * @param {?} logLevel
     * @return {?}
     */
    function (url, message, additional, timestamp, logLevel) {
        return of({});
    };
    return NGXLoggerHttpServiceMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NGXMapperServiceMock = /** @class */ (function () {
    function NGXMapperServiceMock() {
    }
    /**
     * @return {?}
     */
    NGXMapperServiceMock.prototype.getCallerDetails = /**
     * @return {?}
     */
    function () {
        return of({ fileName: 'test.ts', lineNumber: 0, columnNumber: 0 });
    };
    return NGXMapperServiceMock;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoggerTestingModule = /** @class */ (function () {
    function LoggerTestingModule() {
    }
    LoggerTestingModule.decorators = [
        { type: NgModule, args: [{
                    imports: [LoggerModule],
                    providers: [
                        { provide: NGXLogger, useClass: NGXLoggerMock },
                        { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },
                        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                        { provide: NGXMapperService, useClass: NGXMapperServiceMock }
                    ]
                },] }
    ];
    return LoggerTestingModule;
}());

export { CustomNGXLoggerServiceMock, LoggerTestingModule, NGXLoggerHttpServiceMock, NGXLoggerMock, NGXMapperServiceMock };
//# sourceMappingURL=ngx-logger-testing.js.map
