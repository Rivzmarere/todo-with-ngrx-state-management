import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgxUiLoaderService } from '../core/ngx-ui-loader.service';
import { NGX_UI_LOADER_HTTP_CONFIG_TOKEN } from './ngx-ui-loader-http-config.token';
import { HTTP_LOADER_TASK_ID } from '../utils/constants';
import { getExcludeObj, isIgnored } from '../utils/functions';
let NgxUiLoaderHttpInterceptor = class NgxUiLoaderHttpInterceptor {
    /**
     * Constructor
     */
    constructor(customConfig, loader) {
        this.loader = loader;
        this.count = 0;
        this.config = {
            loaderId: this.loader.getDefaultConfig().masterLoaderId,
            showForeground: false
        };
        this.exclude = getExcludeObj(customConfig);
        if (customConfig) {
            this.config = Object.assign(Object.assign({}, this.config), customConfig);
        }
    }
    intercept(req, next) {
        if (isIgnored(req.url, this.exclude.strs, this.exclude.regExps)) {
            return next.handle(req);
        }
        this.count++;
        if (this.config.showForeground) {
            this.loader.startLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);
        }
        else {
            this.loader.startBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID, this.config);
        }
        return next.handle(req).pipe(finalize(() => {
            this.count--;
            if (this.count === 0) {
                if (this.config.showForeground) {
                    this.loader.stopLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);
                }
                else {
                    this.loader.stopBackgroundLoader(this.config.loaderId, HTTP_LOADER_TASK_ID);
                }
            }
        }));
    }
};
NgxUiLoaderHttpInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_HTTP_CONFIG_TOKEN,] }] },
    { type: NgxUiLoaderService }
];
NgxUiLoaderHttpInterceptor = __decorate([
    Injectable(),
    __param(0, Optional()), __param(0, Inject(NGX_UI_LOADER_HTTP_CONFIG_TOKEN)),
    __metadata("design:paramtypes", [Object, NgxUiLoaderService])
], NgxUiLoaderHttpInterceptor);
export { NgxUiLoaderHttpInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci1odHRwLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXVpLWxvYWRlci8iLCJzb3VyY2VzIjpbImxpYi9odHRwL25neC11aS1sb2FkZXItaHR0cC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVwRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTlELElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0lBS3JDOztPQUVHO0lBQ0gsWUFDdUQsWUFBbUMsRUFDaEYsTUFBMEI7UUFBMUIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFFbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxjQUFjO1lBQ3ZELGNBQWMsRUFBRSxLQUFLO1NBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUzQyxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxtQ0FBUSxJQUFJLENBQUMsTUFBTSxHQUFLLFlBQVksQ0FBRSxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ2hELElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMvRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqRjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0Y7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDcEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztpQkFDbkU7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO2lCQUM3RTthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBOzs0Q0F6Q0ksUUFBUSxZQUFJLE1BQU0sU0FBQywrQkFBK0I7WUFDbkMsa0JBQWtCOztBQVZ6QiwwQkFBMEI7SUFEdEMsVUFBVSxFQUFFO0lBVVIsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLCtCQUErQixDQUFDLENBQUE7NkNBQ3BDLGtCQUFrQjtHQVZ6QiwwQkFBMEIsQ0FrRHRDO1NBbERZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTmd4VWlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9uZ3gtdWktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkdYX1VJX0xPQURFUl9IVFRQX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbmd4LXVpLWxvYWRlci1odHRwLWNvbmZpZy50b2tlbic7XG5pbXBvcnQgeyBOZ3hVaUxvYWRlckh0dHBDb25maWcgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEhUVFBfTE9BREVSX1RBU0tfSUQgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0RXhjbHVkZU9iaiwgaXNJZ25vcmVkIH0gZnJvbSAnLi4vdXRpbHMvZnVuY3Rpb25zJztcbmltcG9ydCB7IEV4Y2x1ZGUgfSBmcm9tICcuLi91dGlscy9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFVpTG9hZGVySHR0cEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgcHJpdmF0ZSBjb3VudDogbnVtYmVyO1xuICBwcml2YXRlIGNvbmZpZzogTmd4VWlMb2FkZXJIdHRwQ29uZmlnO1xuICBwcml2YXRlIGV4Y2x1ZGU6IEV4Y2x1ZGU7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE5HWF9VSV9MT0FERVJfSFRUUF9DT05GSUdfVE9LRU4pIGN1c3RvbUNvbmZpZzogTmd4VWlMb2FkZXJIdHRwQ29uZmlnLFxuICAgIHByaXZhdGUgbG9hZGVyOiBOZ3hVaUxvYWRlclNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBsb2FkZXJJZDogdGhpcy5sb2FkZXIuZ2V0RGVmYXVsdENvbmZpZygpLm1hc3RlckxvYWRlcklkLFxuICAgICAgc2hvd0ZvcmVncm91bmQ6IGZhbHNlXG4gICAgfTtcblxuICAgIHRoaXMuZXhjbHVkZSA9IGdldEV4Y2x1ZGVPYmooY3VzdG9tQ29uZmlnKTtcblxuICAgIGlmIChjdXN0b21Db25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlnID0geyAuLi50aGlzLmNvbmZpZywgLi4uY3VzdG9tQ29uZmlnIH07XG4gICAgfVxuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKGlzSWdub3JlZChyZXEudXJsLCB0aGlzLmV4Y2x1ZGUuc3RycywgdGhpcy5leGNsdWRlLnJlZ0V4cHMpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvdW50Kys7XG4gICAgaWYgKHRoaXMuY29uZmlnLnNob3dGb3JlZ3JvdW5kKSB7XG4gICAgICB0aGlzLmxvYWRlci5zdGFydExvYWRlcih0aGlzLmNvbmZpZy5sb2FkZXJJZCwgSFRUUF9MT0FERVJfVEFTS19JRCwgdGhpcy5jb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvYWRlci5zdGFydEJhY2tncm91bmRMb2FkZXIodGhpcy5jb25maWcubG9hZGVySWQsIEhUVFBfTE9BREVSX1RBU0tfSUQsIHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICB0aGlzLmNvdW50LS07XG4gICAgICAgIGlmICh0aGlzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNob3dGb3JlZ3JvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRlci5zdG9wTG9hZGVyKHRoaXMuY29uZmlnLmxvYWRlcklkLCBIVFRQX0xPQURFUl9UQVNLX0lEKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2FkZXIuc3RvcEJhY2tncm91bmRMb2FkZXIodGhpcy5jb25maWcubG9hZGVySWQsIEhUVFBfTE9BREVSX1RBU0tfSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=