import { __assign, __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { BACKGROUND, CLOSING_TIME, DEFAULT_BG_TASK_ID, DEFAULT_CONFIG, DEFAULT_FG_TASK_ID, DEFAULT_TIME, FAST_CLOSING_TIME, FOREGROUND, MIN_DELAY, MIN_TIME, OVERLAY_DISAPPEAR_TIME, FAST_OVERLAY_DISAPPEAR_TIME } from '../utils/constants';
import { NGX_UI_LOADER_CONFIG_TOKEN } from './ngx-ui-loader-config.token';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-ui-loader-config.token";
var NgxUiLoaderService = /** @class */ (function () {
    /**
     * Constructor
     */
    function NgxUiLoaderService(config) {
        this.config = config;
        this.defaultConfig = __assign({}, DEFAULT_CONFIG);
        if (this.config) {
            if (this.config.minTime && this.config.minTime < MIN_TIME) {
                this.config.minTime = MIN_TIME;
            }
            this.defaultConfig = __assign(__assign({}, this.defaultConfig), this.config);
        }
        this.loaders = {};
        this.showForeground = new BehaviorSubject({ loaderId: '', isShow: false });
        this.showForeground$ = this.showForeground.asObservable();
        this.showBackground = new BehaviorSubject({ loaderId: '', isShow: false });
        this.showBackground$ = this.showBackground.asObservable();
        this.fgClosing = new BehaviorSubject({ loaderId: '', isShow: false });
        this.foregroundClosing$ = this.fgClosing.asObservable();
        this.bgClosing = new BehaviorSubject({ loaderId: '', isShow: false });
        this.backgroundClosing$ = this.bgClosing.asObservable();
    }
    /**
     * For internal use only.
     * @docs-private
     */
    NgxUiLoaderService.prototype.bindLoaderData = function (loaderId) {
        var isMaster = loaderId === this.defaultConfig.masterLoaderId;
        if (this.loaders[loaderId]) {
            if (this.loaders[loaderId].isBound) {
                throw new Error("[ngx-ui-loader] - loaderId \"" + loaderId + "\" is duplicated.");
            }
            this.loaders[loaderId].isBound = true;
            this.loaders[loaderId].isMaster = isMaster;
            // emit showEvent after data loader is bound
            if (this.hasRunningTask(FOREGROUND, loaderId)) {
                this.showForeground.next({ loaderId: loaderId, isShow: true });
            }
            else {
                if (this.hasRunningTask(BACKGROUND, loaderId)) {
                    this.showBackground.next({ loaderId: loaderId, isShow: true });
                }
            }
        }
        else {
            this.createLoaderData(loaderId, isMaster, true);
        }
    };
    /**
     * For internal use only.
     * @docs-private
     */
    NgxUiLoaderService.prototype.destroyLoaderData = function (loaderId) {
        this.stopAllLoader(loaderId);
        delete this.loaders[loaderId];
    };
    /**
     * Get default loader configuration
     * @returns default configuration object
     */
    NgxUiLoaderService.prototype.getDefaultConfig = function () {
        return __assign({}, this.defaultConfig);
    };
    /**
     * Get all the loaders
     */
    NgxUiLoaderService.prototype.getLoaders = function () {
        return JSON.parse(JSON.stringify(this.loaders));
    };
    /**
     * Get data of a specified loader. If loaderId is not provided, it will return data of
     * master loader(if existed). Otherwise null is returned.
     */
    NgxUiLoaderService.prototype.getLoader = function (loaderId) {
        loaderId = loaderId ? loaderId : this.defaultConfig.masterLoaderId;
        if (this.loaders[loaderId]) {
            return JSON.parse(JSON.stringify(this.loaders[loaderId]));
        }
        return null;
    };
    /**
     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.
     * @param loaderId the loader Id
     * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.
     */
    NgxUiLoaderService.prototype.startLoader = function (loaderId, taskId, time) {
        if (taskId === void 0) { taskId = DEFAULT_FG_TASK_ID; }
        if (!this.readyToStart(loaderId, taskId, true, time)) {
            return;
        }
        if (!this.loaders[loaderId].tasks[taskId].isOtherRunning) {
            // no other foreground task running
            if (this.hasRunningTask(BACKGROUND, loaderId)) {
                this.backgroundCloseout(loaderId);
                this.showBackground.next({ loaderId: loaderId, isShow: false });
            }
            this.showForeground.next({ loaderId: loaderId, isShow: true });
        }
    };
    /**
     * Start the foreground loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stop() method.
     * NOTE: Really this function just wraps startLoader() function
     * @param taskId the optional task Id of the loading. taskId is set to 'fd-default' by default.
     */
    NgxUiLoaderService.prototype.start = function (taskId, time) {
        if (taskId === void 0) { taskId = DEFAULT_FG_TASK_ID; }
        this.startLoader(this.defaultConfig.masterLoaderId, taskId, time);
    };
    /**
     * Start the background loading of loader having `loaderId` with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.
     * @param loaderId the loader Id
     * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.
     */
    NgxUiLoaderService.prototype.startBackgroundLoader = function (loaderId, taskId, time) {
        if (taskId === void 0) { taskId = DEFAULT_BG_TASK_ID; }
        if (!this.readyToStart(loaderId, taskId, false, time)) {
            return;
        }
        if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.loaders[loaderId].tasks[taskId].isOtherRunning) {
            this.showBackground.next({ loaderId: loaderId, isShow: true });
        }
    };
    /**
     * Start the background loading of master loader with a specified `taskId`.
     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.
     * NOTE: Really this function just wraps startBackgroundLoader() function
     * @param taskId the optional task Id of the loading. taskId is set to 'bg-default' by default.
     */
    NgxUiLoaderService.prototype.startBackground = function (taskId, time) {
        if (taskId === void 0) { taskId = DEFAULT_BG_TASK_ID; }
        this.startBackgroundLoader(this.defaultConfig.masterLoaderId, taskId, time);
    };
    /**
     * Stop a foreground loading of loader having `loaderId` with specific `taskId`
     * @param loaderId the loader Id
     * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.
     * @returns Object
     */
    NgxUiLoaderService.prototype.stopLoader = function (loaderId, taskId) {
        var _this = this;
        if (taskId === void 0) { taskId = DEFAULT_FG_TASK_ID; }
        if (!this.readyToStop(loaderId, taskId)) {
            return;
        }
        if (!this.hasRunningTask(FOREGROUND, loaderId)) {
            this.foregroundCloseout(loaderId);
            this.showForeground.next({ loaderId: loaderId, isShow: false });
            if (this.hasRunningTask(BACKGROUND, loaderId)) {
                setTimeout(function () {
                    if (_this.hasRunningTask(BACKGROUND, loaderId)) {
                        // still have background tasks
                        _this.showBackground.next({ loaderId: loaderId, isShow: true });
                    }
                }, this.defaultConfig.fastFadeOut ? FAST_OVERLAY_DISAPPEAR_TIME : OVERLAY_DISAPPEAR_TIME);
            }
        }
    };
    /**
     * Stop a foreground loading of master loader with specific `taskId`
     * @param taskId the optional task Id to stop. If not provided, 'fg-default' is used.
     * @returns Object
     */
    NgxUiLoaderService.prototype.stop = function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_FG_TASK_ID; }
        this.stopLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Stop a background loading of loader having `loaderId` with specific `taskId`
     * @param loaderId the loader Id
     * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.
     * @returns Object
     */
    NgxUiLoaderService.prototype.stopBackgroundLoader = function (loaderId, taskId) {
        if (taskId === void 0) { taskId = DEFAULT_BG_TASK_ID; }
        if (!this.readyToStop(loaderId, taskId)) {
            return;
        }
        if (!this.hasRunningTask(FOREGROUND, loaderId) && !this.hasRunningTask(BACKGROUND, loaderId)) {
            this.backgroundCloseout(loaderId);
            this.showBackground.next({ loaderId: loaderId, isShow: false });
        }
    };
    /**
     * Stop a background loading of master loader with specific taskId
     * @param taskId the optional task Id to stop. If not provided, 'bg-default' is used.
     * @returns Object
     */
    NgxUiLoaderService.prototype.stopBackground = function (taskId) {
        if (taskId === void 0) { taskId = DEFAULT_BG_TASK_ID; }
        this.stopBackgroundLoader(this.defaultConfig.masterLoaderId, taskId);
    };
    /**
     * Stop all the background and foreground loadings of loader having `loaderId`
     * @param loaderId the loader Id
     */
    NgxUiLoaderService.prototype.stopAllLoader = function (loaderId) {
        if (!this.loaders[loaderId]) {
            console.warn("[ngx-ui-loader] - loaderId \"" + loaderId + "\" does not exist.");
            return;
        }
        if (this.hasRunningTask(FOREGROUND, loaderId)) {
            this.foregroundCloseout(loaderId);
            this.showForeground.next({ loaderId: loaderId, isShow: false });
        }
        else if (this.hasRunningTask(BACKGROUND, loaderId)) {
            this.backgroundCloseout(loaderId);
            this.showBackground.next({ loaderId: loaderId, isShow: false });
        }
        this.clearAllTimers(this.loaders[loaderId].tasks);
        this.loaders[loaderId].tasks = {};
    };
    /**
     * Stop all the background and foreground loadings of master loader
     */
    NgxUiLoaderService.prototype.stopAll = function () {
        this.stopAllLoader(this.defaultConfig.masterLoaderId);
    };
    /**
     * Create loader data if it does not exist
     * @docs-private
     */
    NgxUiLoaderService.prototype.createLoaderData = function (loaderId, isMaster, isBound) {
        if (!this.loaders[loaderId]) {
            this.loaders[loaderId] = {
                loaderId: loaderId,
                tasks: {},
                isMaster: isMaster,
                isBound: isBound
            };
        }
    };
    /**
     * Manage to close foreground loading
     * @docs-private
     * @param loaderId the loader id
     */
    NgxUiLoaderService.prototype.foregroundCloseout = function (loaderId) {
        var _this = this;
        this.fgClosing.next({ loaderId: loaderId, isShow: true });
        setTimeout(function () {
            _this.fgClosing.next({ loaderId: loaderId, isShow: false });
        }, this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME);
    };
    /**
     * Manage to close background loading
     * @docs-private
     * @param loaderId the loader id
     */
    NgxUiLoaderService.prototype.backgroundCloseout = function (loaderId) {
        var _this = this;
        this.bgClosing.next({ loaderId: loaderId, isShow: true });
        setTimeout(function () {
            _this.bgClosing.next({ loaderId: loaderId, isShow: false });
        }, this.defaultConfig.fastFadeOut ? FAST_CLOSING_TIME : CLOSING_TIME);
    };
    /**
     * Clear all timers of the given task
     * @docs-private
     */
    NgxUiLoaderService.prototype.clearTimers = function (task) {
        clearTimeout(task.delayTimer);
        clearTimeout(task.maxTimer);
        clearTimeout(task.minTimer);
    };
    /**
     * Clear all timers of the given tasks
     * @docs-private
     */
    NgxUiLoaderService.prototype.clearAllTimers = function (tasks) {
        var _this = this;
        Object.keys(tasks).map(function (id) {
            _this.clearTimers(tasks[id]);
        });
    };
    /**
     * Check whether the specified loader has a running task with the given `taskId`.
     * If no `taskId` specified, it will check whether the loader has any running tasks.
     * For internal use only.
     * @docs-private
     * @param isForeground foreground task or background task
     * @param loaderId the loader Id
     * @param taskId the optional task Id
     * @returns boolean
     */
    NgxUiLoaderService.prototype.hasRunningTask = function (isForeground, loaderId, taskId) {
        if (this.loaders[loaderId]) {
            var tasks_1 = this.loaders[loaderId].tasks;
            if (taskId) {
                return tasks_1[taskId] ? (tasks_1[taskId].startAt ? true : false) : false;
            }
            return Object.keys(tasks_1).some(function (id) { return !!tasks_1[id].startAt && tasks_1[id].isForeground === isForeground; });
        }
        return false;
    };
    /**
     * @docs-private
     */
    NgxUiLoaderService.prototype.readyToStart = function (loaderId, taskId, isForeground, time) {
        if (time === void 0) { time = DEFAULT_TIME; }
        this.createLoaderData(loaderId, undefined, false);
        var isOtherRunning = this.hasRunningTask(isForeground, loaderId);
        if (!this.loaders[loaderId].tasks[taskId]) {
            this.loaders[loaderId].tasks[taskId] = {
                taskId: taskId,
                isForeground: isForeground,
                minTime: time.minTime >= MIN_TIME ? time.minTime : this.defaultConfig.minTime,
                maxTime: time.maxTime ? time.maxTime : this.defaultConfig.maxTime,
                delay: time.delay >= MIN_DELAY ? time.delay : this.defaultConfig.delay
            };
        }
        else {
            if (this.loaders[loaderId].tasks[taskId].isForeground !== isForeground) {
                throw new Error("[ngx-ui-loader] - taskId \"" + taskId + "\" is duplicated.");
            }
        }
        if (this.setDelayTimer(this.loaders[loaderId].tasks[taskId], loaderId)) {
            return false;
        }
        this.loaders[loaderId].tasks[taskId] = __assign(__assign({}, this.loaders[loaderId].tasks[taskId]), { isOtherRunning: isOtherRunning, startAt: Date.now() });
        this.setMaxTimer(this.loaders[loaderId].tasks[taskId], loaderId);
        if (!this.loaders[loaderId].isBound) {
            return false;
        }
        return true;
    };
    /**
     * @docs-private
     */
    NgxUiLoaderService.prototype.readyToStop = function (loaderId, taskId) {
        if (!this.loaders[loaderId]) {
            console.warn("[ngx-ui-loader] - loaderId \"" + loaderId + "\" does not exist.");
            return false;
        }
        var task = this.loaders[loaderId].tasks[taskId];
        if (!task) {
            return false;
        }
        if (task.isDelayed) {
            this.clearTimers(task);
            delete this.loaders[loaderId].tasks[taskId];
            return false;
        }
        if (this.setMinTimer(task, loaderId)) {
            return false;
        }
        this.clearTimers(task);
        delete this.loaders[loaderId].tasks[taskId];
        return true;
    };
    /**
     * Set delay timer, if `delay` > 0
     * @docs-private
     * @returns boolean
     */
    NgxUiLoaderService.prototype.setDelayTimer = function (task, loaderId) {
        var _this = this;
        if (task.delay > MIN_DELAY) {
            if (task.isDelayed) {
                return true;
            }
            if (!task.delayTimer) {
                task.isDelayed = true;
                task.delayTimer = setTimeout(function () {
                    task.isDelayed = false;
                    if (task.isForeground) {
                        _this.startLoader(loaderId, task.taskId);
                    }
                    else {
                        _this.startBackgroundLoader(loaderId, task.taskId);
                    }
                }, task.delay);
                return true;
            }
        }
        return false;
    };
    /**
     * Set maxTimer if `maxTime` > `minTime`
     * @docs-private
     * @returns boolean
     */
    NgxUiLoaderService.prototype.setMaxTimer = function (task, loaderId) {
        var _this = this;
        if (task.maxTime > task.minTime) {
            // restart the task, reset maxTimer
            clearTimeout(task.maxTimer);
            task.maxTimer = setTimeout(function () {
                if (task.isForeground) {
                    _this.stopLoader(loaderId, task.taskId);
                }
                else {
                    _this.stopBackgroundLoader(loaderId, task.taskId);
                }
            }, task.maxTime);
        }
    };
    /**
     * Set minTimer if `startAt` + `minTime` > `Date.now()`
     * @docs-private
     * @returns boolean
     */
    NgxUiLoaderService.prototype.setMinTimer = function (task, loaderId) {
        var _this = this;
        var now = Date.now();
        if (task.startAt) {
            if (task.startAt + task.minTime > now) {
                task.minTimer = setTimeout(function () {
                    if (task.isForeground) {
                        _this.stopLoader(loaderId, task.taskId);
                    }
                    else {
                        _this.stopBackgroundLoader(loaderId, task.taskId);
                    }
                }, task.startAt + task.minTime - now);
                return true;
            }
        }
        return false;
    };
    NgxUiLoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NGX_UI_LOADER_CONFIG_TOKEN,] }] }
    ]; };
    NgxUiLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxUiLoaderService_Factory() { return new NgxUiLoaderService(i0.ɵɵinject(i1.NGX_UI_LOADER_CONFIG_TOKEN, 8)); }, token: NgxUiLoaderService, providedIn: "root" });
    NgxUiLoaderService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()), __param(0, Inject(NGX_UI_LOADER_CONFIG_TOKEN)),
        __metadata("design:paramtypes", [Object])
    ], NgxUiLoaderService);
    return NgxUiLoaderService;
}());
export { NgxUiLoaderService };
//# sourceMappingURL=data:application/json;base64,