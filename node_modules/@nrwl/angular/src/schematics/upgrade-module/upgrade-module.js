"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const path = require("path");
const workspace_2 = require("@nrwl/workspace");
const upgrade_1 = require("../../utils/upgrade");
const workspace_3 = require("@nrwl/workspace");
const ast_utils_1 = require("../../utils/ast-utils");
const ast_utils_2 = require("@nrwl/workspace/src/utils/ast-utils");
function addImportsToModule(options) {
    return (host) => {
        const { moduleClassName, modulePath, moduleSource } = ast_utils_1.readBootstrapInfo(host, options.project);
        workspace_2.insert(host, modulePath, [
            ast_utils_2.insertImport(moduleSource, modulePath, `configure${workspace_1.toClassName(options.name)}, upgradedComponents`, `../${workspace_1.toFileName(options.name)}-setup`),
            ast_utils_2.insertImport(moduleSource, modulePath, 'UpgradeModule', '@angular/upgrade/static'),
            ...ast_utils_1.addImportToModule(moduleSource, modulePath, 'UpgradeModule'),
            ...ast_utils_1.addDeclarationToModule(moduleSource, modulePath, '...upgradedComponents'),
            ...ast_utils_1.addEntryComponents(moduleSource, modulePath, ast_utils_1.getBootstrapComponent(moduleSource, moduleClassName)),
        ]);
        return host;
    };
}
function addNgDoBootstrapToModule(options) {
    return (host) => {
        const { moduleClassName, modulePath, moduleSource } = ast_utils_1.readBootstrapInfo(host, options.project);
        workspace_2.insert(host, modulePath, [
            ...workspace_2.addParameterToConstructor(moduleSource, modulePath, {
                className: moduleClassName,
                param: 'private upgrade: UpgradeModule',
            }),
            ...workspace_2.addMethod(moduleSource, modulePath, {
                className: moduleClassName,
                methodHeader: 'ngDoBootstrap(): void',
                body: `
configure${workspace_1.toClassName(options.name)}(this.upgrade.injector);
this.upgrade.bootstrap(document.body, ['downgraded', '${options.name}']);
        `,
            }),
            ...ast_utils_1.removeFromNgModule(moduleSource, modulePath, 'bootstrap'),
        ]);
        return host;
    };
}
function createFiles(angularJsImport, options) {
    return (host, context) => {
        const { moduleClassName, mainPath, moduleSpec, bootstrapComponentClassName, bootstrapComponentFileName, } = ast_utils_1.readBootstrapInfo(host, options.project);
        const dir = path.dirname(mainPath);
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign(Object.assign(Object.assign({}, options), { tmpl: '', moduleFileName: moduleSpec, moduleClassName,
                angularJsImport, angularJsModule: options.name, bootstrapComponentClassName,
                bootstrapComponentFileName }), workspace_1.names(options.name))),
            schematics_1.move(dir),
        ]);
        const r = schematics_1.branchAndMerge(schematics_1.chain([schematics_1.mergeWith(templateSource)]));
        return r(host, context);
    };
}
function default_1(options) {
    const angularJsImport = options.angularJsImport
        ? options.angularJsImport
        : options.name;
    return schematics_1.chain([
        createFiles(angularJsImport, options),
        addImportsToModule(options),
        addNgDoBootstrapToModule(options),
        options.skipPackageJson ? schematics_1.noop() : upgrade_1.addUpgradeToPackageJson(),
        workspace_3.formatFiles(options),
    ]);
}
exports.default = default_1;
//# sourceMappingURL=upgrade-module.js.map