"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const path = require("path");
const workspace_1 = require("@nrwl/workspace");
const rules_1 = require("./rules");
const workspace_2 = require("@nrwl/workspace");
/**
 * Rule to generate the Nx 'ngrx' Collection
 * Note: see https://nx.dev/angular/guides/misc-ngrx for guide to generated files
 */
function generateNgrxCollection(_options) {
    return (host, context) => {
        const options = normalizeOptions(_options);
        if (!options.module) {
            throw new Error(`The required --module option must be passed`);
        }
        else if (!host.exists(options.module)) {
            throw new Error(`Path does not exist: ${options.module}`);
        }
        const requestContext = {
            featureName: options.name,
            moduleDir: path.dirname(options.module),
            options,
            host,
        };
        if (options.minimal) {
            options.onlyEmptyRoot = true;
        }
        if (options.skipImport) {
            options.onlyAddFiles = true;
        }
        const fileGeneration = !options.onlyEmptyRoot || (!options.root && options.minimal)
            ? [generateNgrxFilesFromTemplates(options)]
            : [];
        const moduleModification = !options.onlyAddFiles
            ? [
                rules_1.addImportsToModule(requestContext),
                rules_1.addExportsToBarrel(requestContext.options),
            ]
            : [];
        const packageJsonModification = !options.skipPackageJson
            ? [rules_1.addNgRxToPackageJson()]
            : [];
        return schematics_1.chain([
            ...fileGeneration,
            ...moduleModification,
            ...packageJsonModification,
            workspace_2.formatFiles(options),
        ])(host, context);
    };
}
exports.default = generateNgrxCollection;
// ********************************************************
// Internal Function
// ********************************************************
/**
 * Generate 'feature' scaffolding: actions, reducer, effects, interfaces, selectors, facade
 */
function generateNgrxFilesFromTemplates(options) {
    const name = options.name;
    const moduleDir = path.dirname(options.module);
    const excludeFacade = (path) => path.match(/^((?!facade).)*$/);
    const templateSource = schematics_1.apply(schematics_1.url(options.syntax === 'creators' ? './creator-files' : './files'), [
        !options.facade ? schematics_1.filter(excludeFacade) : schematics_1.noop(),
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, options), { tmpl: '' }), workspace_1.names(name))),
        schematics_1.move(moduleDir),
    ]);
    return schematics_1.mergeWith(templateSource);
}
/**
 * Extract the parent 'directory' for the specified
 */
function normalizeOptions(options) {
    return Object.assign(Object.assign({}, options), { directory: workspace_1.toFileName(options.directory) });
}
//# sourceMappingURL=ngrx.js.map